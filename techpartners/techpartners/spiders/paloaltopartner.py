# import needed libraries
import json
import re
import math

import requests

from techpartners.spiders.base_spider import BaseSpider
import scrapy
from bs4 import BeautifulSoup as BS
from techpartners.functions import *
import urllib.parse
from scrapy.http import HtmlResponse


class Spider(BaseSpider):
    # spider name; used for calling spider
    name = 'paloaltopartner'
    partner_program_link = 'https://locator.paloaltonetworks.com/'
    partner_directory = 'paloalto Partner Directory'
    partner_program_name = ''
    crawl_id = None

    start_urls = [partner_program_link]

    custom_settings = {
        'DOWNLOAD_DELAY': 0.5,
        'CONCURRENT_REQUESTS': 2,
    }

    item_fields = ['partner_program_link', 'partner_directory', 'partner_program_name', 'partner_company_name', 'product_service_name',
                   'company_domain_name', 'partner_type', 'partner_tier', 'company_description', 'product_service_description',
                   'headquarters_address',
                   'headquarters_street', 'headquarters_city', 'headquarters_state', 'headquarters_zipcode', 'headquarters_country',
                   'locations_address',
                   'locations_street', 'locations_city', 'locations_state', 'locations_zipcode', 'locations_country',
                   'regions', 'languages', 'products', 'services', 'solutions',
                   'pricing_plan', 'pricing_model', 'pricing_plan_description',
                   'pricing', 'specializations', 'categories',
                   'features', 'account_requirements', 'product_package_name', 'year_founded', 'latest_update', 'publisher',
                   'partnership_timespan', 'partnership_founding_date', 'product_version', 'product_requirements',
                   'general_phone_number', 'general_email_address',
                   'support_phone_number', 'support_email_address', 'support_link', 'help_link', 'terms_and_conditions',
                   'license_agreement_link', 'privacy_policy_link',
                   'linkedin_link', 'twitter_link', 'facebook_link', 'youtube_link', 'instagram_link', 'xing_link',
                   'primary_contact_name', 'primary_contact_phone_number',
                   'industries', 'integrations', 'integration_level', 'competencies', 'partner_programs',
                   'validations', 'certifications', 'designations', 'contract_vehicles', 'certified_experts', 'certified',
                   'company_size', 'company_characteristics', 'partner_clients', 'notes']

    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Safari/537.36',
               'Accept': '*/*',
               'Accept-Language': 'en-US,en;q=0.9',
               'Accept-Encoding': 'gzip, deflate, br',
               'Cache-Control': 'no-cache',
               'Connection': 'keep-alive',
               'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
               'Host': 'locator.paloaltonetworks.com',
               'Origin': 'https://locator.paloaltonetworks.com',
               'Referer': 'https://locator.paloaltonetworks.com/',
               'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="101", "Google Chrome";v="101"',
               'sec-ch-ua-mobile': '?0',
               'sec-ch-ua-platform': 'Windows',
               'Sec-Fetch-Dest': 'empty',
               'Sec-Fetch-Mode': 'cors',
               'Sec-Fetch-Site': 'same-origin',
               'X-Requested-With': 'XMLHttpRequest',
               'X-MicrosoftAjax': 'Delta=true',
               }

    def parse(self, response):
        if response.status != 200:
            self.logger.info(f'ERROR REQUEST STATUS: {response.status}, RESPONSE: {response.text}')
            return

        soup = BS(response.text, "html.parser")
        countries = dict()
        countries_lst = soup.find('select', {'id': 'countryList'}).find_all('option', value=True)
        for optn in countries_lst:
            if optn['value'].strip() != '' and optn['value'].strip() != '-1':
                countries[optn['value'].strip()] = optn.text

        specializations = dict()
        specializations_lst = soup.find('select', {'id': 'NewPartnerSpecializationDropList'}).find_all('option', value=True)
        for optn in specializations_lst:
            if optn['value'].strip() != '' and optn['value'].strip() != '-1':
                specializations[optn['value'].strip()] = optn.text

        for c_id, country in countries.items():
            # self.done_locations = list()
            for s_id, specialization in list(specializations.items()) + [('-1', '')]:
                data = f'ToolkitScriptManager1=UpdatePanel1%7ClbSearch&ToolkitScriptManager1_HiddenField=&hfTotalPages=4&hfNext=Next&hfPrev=Prev&hfDirections=Directions&hfDefaultCityStateORZipCodeTerm=City%20%26%20State%20OR%20Zip%20Code&hfDefaultCityProvinceORPostCodeTerm=City%20%26%20Province%20OR%20Post%20Code&countryList={c_id}&txtCityStateZip=&radiusList=150&PartnerTypeList=-1&PartnerLevelList=-1&PartnerSpecializationList=-1&NewPartnerSpecializationDropList={s_id}&txtPartnerName=&__EVENTTARGET=&__EVENTARGUMENT=&__LASTFOCUS=&__VIEWSTATE=%2FwEPDwULLTE1NjMxODc5MDUPFgYeAklQBQ0xNTYuMTc0LjAuMTU5HgxHb29nbGVBUElLZXkFJ0FJemFTeUJSSmlHZEZzVkdKVXVUeFdob1lJeUU1bXdXRGI2c0NHcx4HTGF0TG9uZwUPMzAuMDM1NSwgMzEuMjIzFgICAw9kFgICBQ9kFgJmD2QWCAIGD2QWBmYPZBYGZg9kFgJmDxAPFgIeC18hRGF0YUJvdW5kZxYCHghvbkNoYW5nZQUrcmV0dXJuIGNvdW50cnlMaXN0X09uU2VsZWN0ZWRJbmRleENoYW5nZSgpOxAV%2BwEOU2VsZWN0IENvdW50cnkNVW5pdGVkIFN0YXRlcwZDYW5hZGEOVW5pdGVkIEtpbmdkb20LQWZnaGFuaXN0YW4Ow4VsYW5kIElzbGFuZHMHQWxiYW5pYQdBbGdlcmlhDkFtZXJpY2FuIFNhbW9hB0FuZG9ycmEGQW5nb2xhCEFuZ3VpbGxhCkFudGFyY3RpY2ETQW50aWd1YSBhbmQgQmFyYnVkYQlBcmdlbnRpbmEHQXJtZW5pYQVBcnViYQlBdXN0cmFsaWEHQXVzdHJpYQpBemVyYmFpamFuB0JhaGFtYXMHQmFocmFpbgpCYW5nbGFkZXNoCEJhcmJhZG9zB0JlbGFydXMHQmVsZ2l1bQZCZWxpemUFQmVuaW4HQmVybXVkYQZCaHV0YW4HQm9saXZpYRZCb3NuaWEgYW5kIEhlcnplZ292aW5hCEJvdHN3YW5hDUJvdXZldCBJc2xhbmQGQnJhemlsHkJyaXRpc2ggSW5kaWFuIE9jZWFuIFRlcnJpdG9yeRZCcml0aXNoIFZpcmdpbiBJc2xhbmRzEUJydW5laSBEYXJ1c3NhbGFtCEJ1bGdhcmlhDEJ1cmtpbmEgRmFzbwdCdXJ1bmRpCENhbWJvZGlhCENhbWVyb29uCkNhcGUgVmVyZGUVQ2FyaWJiZWFuIE5ldGhlcmxhbmRzDkNheW1hbiBJc2xhbmRzGENlbnRyYWwgQWZyaWNhbiBSZXB1YmxpYwRDaGFkBUNoaWxlBUNoaW5hEENocmlzdG1hcyBJc2xhbmQXQ29jb3MgKEtlZWxpbmcpIElzbGFuZHMIQ29sb21iaWEHQ29tb3JvcwVDb25nbwxDb29rIElzbGFuZHMKQ29zdGEgUmljYQdDcm9hdGlhBEN1YmEHQ3VyYWNhbwZDeXBydXMOQ3plY2ggUmVwdWJsaWMgRGVtb2NyYXRpYyBSZXB1YmxpYyBvZiB0aGUgQ29uZ28HRGVubWFyawhEamlib3V0aQhEb21pbmljYRJEb21pbmljYW4gUmVwdWJsaWMKRWFzdCBUaW1vcgdFY3VhZG9yBUVneXB0C0VsIFNhbHZhZG9yEUVxdWF0b3JpYWwgR3VpbmVhB0VyaXRyZWEHRXN0b25pYQhFdGhpb3BpYQ5GYWVyb2UgSXNsYW5kcxBGYWxrbGFuZCBJc2xhbmRzBEZpamkHRmlubGFuZAZGcmFuY2UNRnJlbmNoIEd1aWFuYRBGcmVuY2ggUG9seW5lc2lhG0ZyZW5jaCBTb3V0aGVybiBUZXJyaXRvcmllcwVHYWJvbgZHYW1iaWEHR2VvcmdpYQdHZXJtYW55BUdoYW5hCUdpYnJhbHRhcgZHcmVlY2UJR3JlZW5sYW5kB0dyZW5hZGEKR3VhZGVsb3VwZQRHdWFtCUd1YXRlbWFsYQhHdWVybnNleQZHdWluZWENR3VpbmVhLUJpc3NhdQZHdXlhbmEFSGFpdGkhSGVhcmQgSXNsYW5kIGFuZCBNY0RvbmFsZCBJc2xhbmRzCEhvbmR1cmFzD0NoaW5hL0hvbmcgS29uZwdIdW5nYXJ5B0ljZWxhbmQFSW5kaWEJSW5kb25lc2lhBElyYW4ESXJhcQdJcmVsYW5kC0lzbGUgb2YgTWFuBklzcmFlbAVJdGFseQtJdm9yeSBDb2FzdAdKYW1haWNhBUphcGFuBkplcnNleQZKb3JkYW4KS2F6YWtoc3RhbgVLZW55YQhLaXJpYmF0aQZLb3Nvdm8GS3V3YWl0Ckt5cmd5enN0YW4ETGFvcwZMYXR2aWEHTGViYW5vbgdMZXNvdGhvB0xpYmVyaWEFTGlieWENTGllY2h0ZW5zdGVpbglMaXRodWFuaWEKTHV4ZW1ib3VyZwVNYWNhdQlNYWNlZG9uaWEKTWFkYWdhc2NhcgZNYWxhd2kITWFsYXlzaWEITWFsZGl2ZXMETWFsaQVNYWx0YRBNYXJzaGFsbCBJc2xhbmRzCk1hcnRpbmlxdWUKTWF1cml0YW5pYQlNYXVyaXRpdXMHTWF5b3R0ZQZNZXhpY28KTWljcm9uZXNpYQdNb2xkb3ZhBk1vbmFjbwhNb25nb2xpYQpNb250ZW5lZ3JvCk1vbnRzZXJyYXQHTW9yb2NjbwpNb3phbWJpcXVlB015YW5tYXIHTmFtaWJpYQVOYXVydQVOZXBhbAtOZXRoZXJsYW5kcw1OZXcgQ2FsZWRvbmlhC05ldyBaZWFsYW5kCU5pY2FyYWd1YQVOaWdlcgdOaWdlcmlhBE5pdWUOTm9yZm9sayBJc2xhbmQLTm9ydGggS29yZWEYTm9ydGhlcm4gTWFyaWFuYSBJc2xhbmRzBk5vcndheQRPbWFuCFBha2lzdGFuBVBhbGF1FVBhbGVzdGluaWFuIFRlcnJpdG9yeQZQYW5hbWEQUGFwdWEgTmV3IEd1aW5lYQhQYXJhZ3VheQRQZXJ1C1BoaWxpcHBpbmVzCFBpdGNhaXJuBlBvbGFuZAhQb3J0dWdhbAtQdWVydG8gUmljbwVRYXRhcgdSZXVuaW9uB1JvbWFuaWESUnVzc2lhbiBGZWRlcmF0aW9uBlJ3YW5kYRVTYWludCBLaXR0cyBhbmQgTmV2aXMLU2FpbnQgTHVjaWEgU2FpbnQgVmluY2VudCBhbmQgdGhlIEdyZW5hZGluZXMFU2Ftb2EKU2FuIE1hcmlubxVTYW8gVG9tZSBhbmQgUHJpbmNpcGUMU2F1ZGkgQXJhYmlhB1NlbmVnYWwGU2VyYmlhClNleWNoZWxsZXMMU2llcnJhIExlb25lCVNpbmdhcG9yZQ9TbG92YWsgUmVwdWJsaWMIU2xvdmVuaWEPU29sb21vbiBJc2xhbmRzB1NvbWFsaWEMU291dGggQWZyaWNhKVNvdXRoIEdlb3JnaWEgYW5kIFNvdXRoIFNhbmR3aWNoIElzbGFuZHMuC1NvdXRoIEtvcmVhC1NvdXRoIFN1ZGFuBVNwYWluCVNyaSBMYW5rYQ5TdC4gQmFydGhlbGVteQpTdC4gSGVsZW5hC1N0LiBNYWFydGVuClN0LiBNYXJ0aW4XU3QuIFBpZXJyZSBhbmQgTWlxdWVsb24FU3VkYW4IU3VyaW5hbWUeU3ZhbGJhcmQgYW5kIEphbiBNYXllbiBJc2xhbmRzCVN3YXppbGFuZAZTd2VkZW4LU3dpdHplcmxhbmQFU3lyaWEGVGFpd2FuClRhamlraXN0YW4IVGFuemFuaWEIVGhhaWxhbmQEVG9nbwdUb2tlbGF1BVRvbmdhE1RyaW5pZGFkIGFuZCBUb2JhZ28HVHVuaXNpYQZUdXJrZXkMVHVya21lbmlzdGFuGFR1cmtzIGFuZCBDYWljb3MgSXNsYW5kcwZUdXZhbHUGVWdhbmRhB1VrcmFpbmUUVW5pdGVkIEFyYWIgRW1pcmF0ZXMHVXJ1Z3VheRlVUyBNaW5vciBPdXRseWluZyBJc2xhbmRzEVVTIFZpcmdpbiBJc2xhbmRzClV6YmVraXN0YW4HVmFudWF0dRJWYXRpY2FuIENpdHkgU3RhdGUJVmVuZXp1ZWxhB1ZpZXRuYW0ZV2FsbGlzIGFuZCBGdXR1bmEgSXNsYW5kcw5XZXN0ZXJuIFNhaGFyYQVZZW1lbgZaYW1iaWEIWmltYmFid2UV%2BwECLTEBMQEyAjg4AzI3NAMyNzYBMwE0ATUBNgE3ATgDMjc1ATkCMTACMTECMTICMTMCMTQCMTUCMTcCMTgCMTkCMjACMjECMjICMjMCMjQCMjUCMjYCMjcCMjkCMzACMzECMzICMzMDMjYwAjM0AjM1AjM2AjM3AjM4AjM5AjQyAzI4NgI0MwI0NAI0NQI0NwI0OAI0OQI1MAI1MQI1MgMyODQCNTQCNTUCNTcDMjc3AjU4AjU5AjYwAjUzAjYxAjYyAjYzAjY0AjY1AjY2AjY3AjY4AjcwAjcxAjcyAjczAjc0Ajc1Ajc2Ajc3Ajc4Ajc5AjgwAjgxAjgyAjgzAjg0Ajg1Ajg2Ajg3Ajg5AjkwAjkxAjkyAjkzAjk0AzI3OQI5NQI5NgI5NwI5OAI5OQMxMDADMTAxAzEwMgMxMDMDMTA0AzEwNQMyNzEDMjgxAzEwNgMyODADMTA3AzEwOAI1NgMxMDkDMTEwAzI4MgMxMTEDMTEyAzExMwMxMTQDMjg3AzExNgMxMTcDMTE4AzExOQMxMjADMTIxAzEyMgMxMjMDMTI0AzEyNQMxMjYDMTI3AzEyOAMxMjkDMTMxAzEzMgMxMzMDMTM0AzEzNQMxMzYDMTM3AzEzOAMxMzkDMTQwAzE0MQMxNDIDMTQzAzE0NAMxNDUDMjg1AzE0NgMxNDcDMTQ4AzE0OQMxNTADMTUxAzE1MgMxNTMDMTU2AzE1NwMxNTgDMTU5AzE2MAMxNjEDMTYyAzE2MwMxNjUDMTY2AzE2NwMxNjgDMTY5AzI4MwMxNzADMTcxAzE3MgMxNzMDMTc0AzE3NQMxNzYDMTc4AzE3OQMxODADMTgxAzE4MgMxODQDMTg1AzE4NwMxODgDMTg5AzE5MQMxOTIDMTkzAzE5NAMxOTYDMjcyAzE5NwMxOTgDMTk5AzIwMAMyMDEDMjAyAzIwMwMyMDQDMjA1AzIwNgMxODYDMjA3AzIwOAMyMDkDMjEzAzIxNwMyMTgDMjE5AzIyMgMyMjMDMjI0AzIyNQMyMjYDMjI3AzIyOAMyMzADMjMxAzIzMgMyMzMDMjM1AzIzNgMyMzcDMjM5AzI0MQMyNDIDMjQzAzI0NAMyNDUDMjQ2AzI0NwMyNDkDMjUxAzI1MgMyNjEDMjU0AzI1NQMyNTYDMjU3AzI1OAMyNjMDMjc4AzI2NgMyNjkDMjcwFCsD%2BwFnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2RkAgEPZBYCAgMPD2QWAh4Kb25LZXlQcmVzcwVSamF2YXNjcmlwdDppZiAoZXZlbnQua2V5Q29kZSA9PSAxMykgeyBfX2RvUG9zdEJhY2soJ2xiU2VhcmNoJywnJyk7IHJldHVybiBmYWxzZTsgfWQCAw9kFgICAQ8PFgIeBFRleHQFBlNlYXJjaGRkAgEPZBYGZg9kFgJmDxAPFgIfA2cWAh8EBS9yZXR1cm4gUGFydG5lclR5cGVMaXN0X09uU2VsZWN0ZWRJbmRleENoYW5nZSgpOxAVBA9DaG9vc2UgQ2F0ZWdvcnkIUmVzZWxsZXILRGlzdHJpYnV0b3IETVNTUBUEAi0xBDMwMjIEMzAyMwU4Mjk3OBQrAwRnZ2dnZGQCAQ9kFgICAw8QDxYCHwNnZBAVBA9DaG9vc2UgQ2F0ZWdvcnkRRGlhbW9uZCBJbm5vdmF0b3ISUGxhdGludW0gSW5ub3ZhdG9yCUlubm92YXRvchUEAi0xBDMwMTkEMzAyMAQzMDIxFCsDBGdnZ2dkZAICD2QWAmYPEA8WAh8DZ2QQFQYPQ2hvb3NlIENhdGVnb3J5A0FTQwNBVEMEQ1BTUANBVFAEUFNEUBUGAi0xBDMyNjgEMzI2OQQzMjcwBjEwMDY4MAYxMDY0ODAUKwMGZ2dnZ2dnZGQCAg9kFgJmD2QWAmYPEA8WAh8DZxYCHwQFQHJldHVybiBOZXdQYXJ0bmVyU3BlY2lhbGl6YXRpb25Ecm9wTGlzdF9PblNlbGVjdGVkSW5kZXhDaGFuZ2UoKTsQFQUPQ2hvb3NlIENhdGVnb3J5EENvcnRleCBYU09BUitYRFIMUHJpc21hIENsb3VkC1ByaXNtYSBTQVNFA01EUhUFAi0xBjEwMzk2MwYxMDM5NjQGMTAzOTY1BjEwNjMxNxQrAwVnZ2dnZ2RkAgcPEGRkFgBkAgsPDxYCHwYFAzE4OGRkAgwPFCsAAg8WBB8DZx4LXyFJdGVtQ291bnQCvAFkZBb4AmYPZBYSZg8VAQgyOTIyMjYxOWQCAg8VAShBY2NlbnR1cmUgKHVrKSBMaW1pdGVkIC0gUGFydG5lciBBY2NvdW50ZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBxMzMCBGZW5jaHVyY2ggU3RyZWV0AAZMb25kb24ACEVDM00gM0JEDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQeB29uY2xpY2sFGkxvZ0NsaWtlZCgiMjkyMjI2MTkiLCAiMiIpHgdWaXNpYmxlaBYCZg8VAQdDb250YWN0ZAICDw8WAh8JaGRkAgQPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjYxOSIsICIxIikfCWgWAmYPFQEHV2Vic2l0ZWQCBQ8PFgIfCWhkZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjkyMjI2MTkiLCAiNSIpHgRocmVmBVBodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPTMwIEZlbmNodXJjaCBTdHJlZXQgTG9uZG9uICBFQzNNIDNCRCBHQh4GdGFyZ2V0BQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFEURpYW1vbmQgSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILD2QWBGYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFBENQU1BkZAIPD2QWAmYPFQIHaHR0cDovLwBkAgEPZBYSZg8VAQgyMzY3MTQ5NmQCAg8VAR9CZWNodGxlIExvZ2lzdGlrICYgU2VydmljZSBHbWJIZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBxxUdXJucGlrZSBIb3VzZSwgTWV0aHVlbiBQYXJrAApDaGlwcGVuaGFtAAhTTjE0IDBHRg1kaXNwbGF5OmJsb2NrDys0NCAxMjQ5LzQ2NzkwMGQCBQ9kFgYCAQ8WAh8IBRpMb2dDbGlrZWQoIjIzNjcxNDk2IiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGkxvZ0NsaWtlZCgiMjM2NzE0OTYiLCAiMSIpHwoFES8vd3d3LmJlY2h0bGUuY29tHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjM2NzE0OTYiLCAiNSIpHwoFXGh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9VHVybnBpa2UgSG91c2UgTWV0aHVlbiBQYXJrIENoaXBwZW5oYW0gIFNOMTQgMEdGIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgURRGlhbW9uZCBJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPZBYEZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUDQVNDZGQCDw9kFgJmDxUCFmh0dHA6Ly93d3cuYmVjaHRsZS5jb20Pd3d3LmJlY2h0bGUuY29tZAICD2QWEmYPFQEIMjkyMjI1NTBkAgIPFQEhQnJpdGlzaCBUZWxlY29tIChCVCkgR3JvdXAgcGxjIEhRZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBxxCdCBDZW50cmU7IDgxIE5ld2dhdGUgU3RyZWV0AAZMT05ET04ACEVDMUEgN0FKDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjU1MCIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjI1NTAiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyNTUwIiwgIjUiKR8KBVhodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%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%2Fc2FkZHI9JmRhZGRyPU9uZSBOZXcgQ2hhbmdlIExvbmRvbiAgRUM0TSA5QUYgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBRFEaWFtb25kIElubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw9kFgRmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIBDw8WAh8GBQlBU0M7IENQU1BkZAIPD2QWAmYPFQIVaHR0cDovL3d3dy51ay5jZHcuY29tDnd3dy51ay5jZHcuY29tZAIHD2QWEmYPFQEIMTY3NjM0MzJkAgIPFQELQ0RXIExpbWl0ZWRkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHGDNyZCBGbG9vciAxMCBGbGVldCBQbGFjZQAGTG9uZG9uAAhFQzRNIDdSQg1kaXNwbGF5OmJsb2NrECs0NCAyMDcgNzkxIDYwMDBkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIxNjc2MzQzMiIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjE2NzYzNDMyIiwgIjEiKR8KBRAvL3d3dy51ay5jZHcuY29tHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMTY3NjM0MzIiLCAiNSIpHwoFVWh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9M3JkIEZsb29yIDEwIEZsZWV0IFBsYWNlIExvbmRvbiAgRUM0TSA3UkIgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBRFEaWFtb25kIElubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw9kFgRmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIBDw8WAh8GBQlBU0M7IENQU1BkZAIPD2QWAmYPFQIVaHR0cDovL3d3dy51ay5jZHcuY29tDnd3dy51ay5jZHcuY29tZAIID2QWEmYPFQEIMjkyMjIzMzlkAgIPFQESRFhDIFRlY2hub2xvZ3kgVUtJZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBx5Sb3lhbCBQYXZpbGlvbjsgV2VsbGVzbGV5IFJvYWQACUFsZGVyc2hvdAAIR1UxMSAxUFoMZGlzcGxheTpub25lAGQCBQ9kFgoCAQ8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyMzM5IiwgIjIiKR8JaBYCZg8VAQdDb250YWN0ZAICDw8WAh8JaGRkAgQPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjMzOSIsICIxIikfCWgWAmYPFQEHV2Vic2l0ZWQCBQ8PFgIfCWhkZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjkyMjIzMzkiLCAiNSIpHwoFXWh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9Um95YWwgUGF2aWxpb24gV2VsbGVzbGV5IFJvYWQgQWxkZXJzaG90ICBHVTExIDFQWiBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFEURpYW1vbmQgSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAgkPZBYSZg8VAQgyOTIyMjUxMGQCAg8VARJEWEMgVGVjaG5vbG9neSBVS0lkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHFkFNRU4gQ09STkVSOyBDQUlOIFJPQUQACUJyYWNrbmVsbAAIUkcxMiAxSE4MZGlzcGxheTpub25lAGQCBQ9kFgoCAQ8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyNTEwIiwgIjIiKR8JaBYCZg8VAQdDb250YWN0ZAICDw8WAh8JaGRkAgQPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjUxMCIsICIxIikfCWgWAmYPFQEHV2Vic2l0ZWQCBQ8PFgIfCWhkZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjkyMjI1MTAiLCAiNSIpHwoFVWh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9QU1FTiBDT1JORVIgQ0FJTiBST0FEIEJyYWNrbmVsbCAgUkcxMiAxSE4gR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBRFEaWFtb25kIElubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCB2h0dHA6Ly8AZAIKD2QWEmYPFQEIMzA0NTIzODNkAgIPFQESS0hJUFUgTmV0d29ya3MgTHRkZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBxozIFdhdGVyZnJvbnQgQnVzaW5lc3MgUGFyawAFRmxlZXQACEdVNTEgM1RXDWRpc3BsYXk6YmxvY2sLMDM0NTI3MjA5MDBkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIzMDQ1MjM4MyIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjMwNDUyMzgzIiwgIjEiKR8KBRVodHRwczovL3d3dy5raGlwdS5jb20fCwUGX2JsYW5rFgJmDxUBB1dlYnNpdGVkAgcPFgYfCAUaTG9nQ2xpa2VkKCIzMDQ1MjM4MyIsICI1IikfCgVWaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj0zIFdhdGVyZnJvbnQgQnVzaW5lc3MgUGFyayBGbGVldCAgR1U1MSAzVFcgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBRFEaWFtb25kIElubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw9kFgRmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIBDw8WAh8GBQlBU0M7IENQU1BkZAIPD2QWAmYPFQIcaHR0cDovL2h0dHBzOi8vd3d3LmtoaXB1LmNvbRVodHRwczovL3d3dy5raGlwdS5jb21kAgsPZBYSZg8VAQgyOTIyMjM0NmQCAg8VARNOdHQgRGF0YSBVayBMaW1pdGVkZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBxAxIFJveWFsIEV4Y2hhbmdlAAZMb25kb24ACEVDM1YgM0RHDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjM0NiIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjIzNDYiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyMzQ2IiwgIjUiKR8KBU1odHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPTEgUm95YWwgRXhjaGFuZ2UgTG9uZG9uICBFQzNWIDNERyBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFEURpYW1vbmQgSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILD2QWBGYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFBENQU1BkZAIPD2QWAmYPFQIHaHR0cDovLwBkAgwPZBYSZg8VAQgyOTIyMjM0M2QCAg8VAQ5OVFQgRXVyb3BlIEx0ZGQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcVMSBLaW5nIFdpbGxpYW0gU3RyZWV0AAZMT05ET04ACEVDNE4gN0FSDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjM0MyIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjIzNDMiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyMzQzIiwgIjUiKR8KBVJodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%%2Fc2FkZHI9JmRhZGRyPVRoZSBXYWxicm9vayBCdWlsZGluZyAyNSBXYWxicm9vayBMb25kb24gIEVDNE4gOEFRIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgURRGlhbW9uZCBJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAhRodHRwOi8vd3d3LnZpenN0LmNvbQ13d3cudml6c3QuY29tZAIXD2QWEmYPFQEIMTM3MDM5MDBkAgIPFQEVV29ybGQgV2lkZSBUZWNobm9sb2d5ZAIDDxYCHwYFDFNhbGVzIE9mZmljZWQCBA8VBxAyNSBDYW5hZGEgU3F1YXJlAAZMb25kb24AB0UxNCA1TFENZGlzcGxheTpibG9jaw4oMzE0KSA5OTUtNjExMGQCBQ9kFgYCAQ8WAh8IBRpMb2dDbGlrZWQoIjEzNzAzOTAwIiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGkxvZ0NsaWtlZCgiMTM3MDM5MDAiLCAiMSIpHwoFDS8vd3d3Lnd3dC5jb20fCwUGX2JsYW5rFgJmDxUBB1dlYnNpdGVkAgcPFgYfCAUaTG9nQ2xpa2VkKCIxMzcwMzkwMCIsICI1IikfCgVMaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj0yNSBDYW5hZGEgU3F1YXJlIExvbmRvbiAgRTE0IDVMUSBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFEURpYW1vbmQgSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILD2QWBGYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFBENQU1BkZAIPD2QWAmYPFQISaHR0cDovL3d3dy53d3QuY29tC3d3dy53d3QuY29tZAIYD2QWEmYPFQEIMjEwNjE0NTBkAgIPFQEdQWR2YW5jZWQgTmV0d29yayBTZWN1cml0eSBMdGRkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHI0NlbnRyYWwgNDAsIENoaW5laGFtIEJ1c2luZXNzIFBhcmssAAtCYXNpbmdzdG9rZQAIUkcyNCA4R1UNZGlzcGxheTpibG9jawswODQ1MjI2MDQ2MmQCBQ9kFgYCAQ8WAh8IBRpMb2dDbGlrZWQoIjIxMDYxNDUwIiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGkxvZ0NsaWtlZCgiMjEwNjE0NTAiLCAiMSIpHwoFFC8vd3d3LmFuc2VjdXJpdHkuY29tHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjEwNjE0NTAiLCAiNSIpHwoFY2h0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9Q2VudHJhbCA0MCBDaGluZWhhbSBCdXNpbmVzcyBQYXJrIEJhc2luZ3N0b2tlICBSRzI0IDhHVSBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFElBsYXRpbnVtIElubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCGWh0dHA6Ly93d3cuYW5zZWN1cml0eS5jb20Sd3d3LmFuc2VjdXJpdHkuY29tZAIZD2QWEmYPFQEIMjkyMjI1NzJkAgIPFQEHQXRvcyBVS2QCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcdNCBUcml0b24gU3F1YXJlIFJlZ2VudHMgUGxhY2UABkxvbmRvbgAHTlcxIDNIRwxkaXNwbGF5Om5vbmUAZAIFD2QWCgIBDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjI1NzIiLCAiMiIpHwloFgJmDxUBB0NvbnRhY3RkAgIPDxYCHwloZGQCBA8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyNTcyIiwgIjEiKR8JaBYCZg8VAQdXZWJzaXRlZAIFDw8WAh8JaGRkAgcPFgYfCAUaTG9nQ2xpa2VkKCIyOTIyMjU3MiIsICI1IikfCgVZaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj00IFRyaXRvbiBTcXVhcmUgUmVnZW50cyBQbGFjZSBMb25kb24gIE5XMSAzSEcgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBRJQbGF0aW51bSBJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCGg9kFhJmDxUBCDE2NzYzNDk0ZAICDxUBG0NBRSBUZWNobm9sb2d5IFNlcnZpY2VzIEx0ZGQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcXQ0FFIEhvdXNlLCBDb2xvbmlhbCB3YXkAB1dhdGZvcmQACFdEMjQgNFBUDWRpc3BsYXk6YmxvY2sLMDE5MjM0Nzc2MDBkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIxNjc2MzQ5NCIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjE2NzYzNDk0IiwgIjEiKR8KBRMvL3d3dy50aGlzaXNjYWUuY29tHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMTY3NjM0OTQiLCAiNSIpHwoFVGh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9Q0FFIEhvdXNlIENvbG9uaWFsIHdheSBXYXRmb3JkICBXRDI0IDRQVCBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFElBsYXRpbnVtIElubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw9kFgRmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIBDw8WAh8GBQNBU0NkZAIPD2QWAmYPFQIYaHR0cDovL3d3dy50aGlzaXNjYWUuY29tEXd3dy50aGlzaXNjYWUuY29tZAIbD2QWEmYPFQEIMTg0ODM0MDJkAgIPFQEeQ2hhcnRlcmhvdXNlIFZvaWNlICYgRGF0YSBMdGQuZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VB0JUaGUgR2F0ZSBIb3VzZSwgNSBDaGFwZWwgUGxhY2UsIFJpdmluZ3RvbiBTdHJlZXQsIExvbmRvbiwgRUMyQSAzU0IABkxvbmRvbgAIRUMyQSAzU0INZGlzcGxheTpibG9jawwwMjA3IDYxMzc0MDBkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIxODQ4MzQwMiIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjE4NDgzNDAyIiwgIjEiKR8KBRAvL3d3dy5jdmQucGxjLnVrHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMTg0ODM0MDIiLCAiNSIpHwoFe2h0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9VGhlIEdhdGUgSG91c2UgNSBDaGFwZWwgUGxhY2UgUml2aW5ndG9uIFN0cmVldCBMb25kb24gRUMyQSAzU0IgTG9uZG9uICBFQzJBIDNTQiBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFElBsYXRpbnVtIElubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCFWh0dHA6Ly93d3cuY3ZkLnBsYy51aw53d3cuY3ZkLnBsYy51a2QCHA9kFhJmDxUBCDE2NzYzNjYzZAICDxUBEUNvbXB1dGFjZW50ZXIgIFVLZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBw9IYXRmaWVsZCBBdmVudWUACEhhdGZpZWxkAAdTRTEgOEhMDWRpc3BsYXk6YmxvY2sQezQ0fTE3MDctNjMxLTAwMGQCBQ9kFgYCAQ8WAh8IBRpMb2dDbGlrZWQoIjE2NzYzNjYzIiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGkxvZ0NsaWtlZCgiMTY3NjM2NjMiLCAiMSIpHwoFFy8vd3d3LmNvbXB1dGFjZW50ZXIuY29tHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMTY3NjM2NjMiLCAiNSIpHwoFTWh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9SGF0ZmllbGQgQXZlbnVlIEhhdGZpZWxkICBTRTEgOEhMIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUSUGxhdGludW0gSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIcaHR0cDovL3d3dy5jb21wdXRhY2VudGVyLmNvbRV3d3cuY29tcHV0YWNlbnRlci5jb21kAh0PZBYSZg8VAQgzMTE5MDQ4NGQCAg8VAQZDeXBocmFkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHKDE2IFRoZSBJbm5vdmF0aW9uIENlbnRyZSwgUXVlZW7igJlzIFJvYWQAB0JlbGZhc3QAB0JUMyA5RFQNZGlzcGxheTpibG9jaw0wMjggOTA5OSA1OTY3ZAIFD2QWBgIBDxYCHwgFGkxvZ0NsaWtlZCgiMzExOTA0ODQiLCAiMiIpFgJmDxUBB0NvbnRhY3RkAgQPFgYfCAUaTG9nQ2xpa2VkKCIzMTE5MDQ4NCIsICIxIikfCgUTaHR0cHM6Ly9jeXBocmEuY29tLx8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRpMb2dDbGlrZWQoIjMxMTkwNDg0IiwgIjUiKR8KBWFodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPTE2IFRoZSBJbm5vdmF0aW9uIENlbnRyZSBRdWVlbnMgUm9hZCBCZWxmYXN0ICBCVDMgOURUIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUSUGxhdGludW0gSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIaaHR0cDovL2h0dHBzOi8vY3lwaHJhLmNvbS8TaHR0cHM6Ly9jeXBocmEuY29tL2QCHg9kFhJmDxUBCDMxMTkwNDg1ZAICDxUBBkN5cGhyYWQCAw8WAh8GBQxTYWxlcyBPZmZpY2VkAgQPFQcWMTAwIFdlc3QgR2VvcmdlIFN0cmVldAAHR2xhc2dvdwAHRzIgIDFQSg1kaXNwbGF5OmJsb2NrDTAxNDEgMzE5IDg3NTVkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIzMTE5MDQ4NSIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjMxMTkwNDg1IiwgIjEiKR8KBRNodHRwczovL2N5cGhyYS5jb20vHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMzExOTA0ODUiLCAiNSIpHwoFU2h0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9MTAwIFdlc3QgR2VvcmdlIFN0cmVldCBHbGFzZ293ICBHMiAgMVBKIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUSUGxhdGludW0gSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIaaHR0cDovL2h0dHBzOi8vY3lwaHJhLmNvbS8TaHR0cHM6Ly9jeXBocmEuY2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%2Fc2FkZHI9JmRhZGRyPTEwMCBMaXZlcnBvb2wgU3RyZWV0IExvbmRvbiAgRUMyTSAyQVQgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBRJQbGF0aW51bSBJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPZBYEZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUEQ1BTUGRkAg8PZBYCZg8VAgdodHRwOi8vAGQCJg9kFhJmDxUBCDI4OTY5ODk0ZAICDxUBD05hdGlsaWsgTGltaXRlZGQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQccTmF0aWxpayw5YSBEZXZvbnNoaXJlIFNxdWFyZQAGTE9ORE9OAAhFQzJNIDRZTg1kaXNwbGF5OmJsb2NrCzAyMDM1OTc4MjM5ZAIFD2QWBgIBDxYCHwgFGkxvZ0NsaWtlZCgiMjg5Njk4OTQiLCAiMiIpFgJmDxUBB0NvbnRhY3RkAgQPFgYfCAUaTG9nQ2xpa2VkKCIyODk2OTg5NCIsICIxIikfCgURLy93d3cubmF0aWxpay5jb20fCwUGX2JsYW5rFgJmDxUBB1dlYnNpdGVkAgcPFgYfCAUaTG9nQ2xpa2VkKCIyODk2OTg5NCIsICI1IikfCgVYaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj1OYXRpbGlrOWEgRGV2b25zaGlyZSBTcXVhcmUgTE9ORE9OICBFQzJNIDRZTiBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFElBsYXRpbnVtIElubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCFmh0dHA6Ly93d3cubmF0aWxpay5jb20Pd3d3Lm5hdGlsaWsuY29tZAInD2QWEmYPFQEIMjkyMjI2MzRkAgIPFQEUU2llbWVucyBIb2xkaW5ncyBQbGNkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHKFNpciBXaWxsaWFtIFNpZW1lbnMgSG91c2U7IFByaW5jZXNzIFJvYWQACk1hbmNoZXN0ZXIAB00yMCAyVVIMZGlzcGxheTpub25lAGQCBQ9kFgoCAQ8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyNjM0IiwgIjIiKR8JaBYCZg8VAQdDb250YWN0ZAICDw8WAh8JaGRkAgQPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjYzNCIsICIxIikfCWgWAmYPFQEHV2Vic2l0ZWQCBQ8PFgIfCWhkZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjkyMjI2MzQiLCAiNSIpHwoFZ2h0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9U2lyIFdpbGxpYW0gU2llbWVucyBIb3VzZSBQcmluY2VzcyBSb2FkIE1hbmNoZXN0ZXIgIE0yMCAyVVIgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBRJQbGF0aW51bSBJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCKA9kFhJmDxUBCDI5MjIyNjcxZAICDxUBB1NvZnRjYXRkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHD0ZpZWxkaG91c2UgTGFuZQAGTWFybG93AAdTTDcgMUxXDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjY3MSIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjI2NzEiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyNjcxIiwgIjUiKR8KBUtodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPUZpZWxkaG91c2UgTGFuZSBNYXJsb3cgIFNMNyAxTFcgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBRJQbGF0aW51bSBJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCKQ9kFhJmDxUBCDI5MjIyNTA2ZAICDxUBFVRlbHN0cmEgKGN0ZSkgTGltaXRlZGQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcnQmx1ZSBGaW4gQnVpbGRpbmcsIDExMCBTb3V0aHdhcmsgU3RyZWV0AAZMb25kb24AB1NFMSAwVEEMZGlzcGxheTpub25lAGQCBQ9kFgoCAQ8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyNTA2IiwgIjIiKR8JaBYCZg8VAQdDb250YWN0ZAICDw8WAh8JaGRkAgQPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjUwNiIsICIxIikfCWgWAmYPFQEHV2Vic2l0ZWQCBQ8PFgIfCWhkZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjkyMjI1MDYiLCAiNSIpHwoFYmh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9Qmx1ZSBGaW4gQnVpbGRpbmcgMTEwIFNvdXRod2FyayBTdHJlZXQgTG9uZG9uICBTRTEgMFRBIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUSUGxhdGludW0gSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAioPZBYSZg8VAQgxNjc2MzAxOWQCAg8VAQhUZW5lbyBVS2QCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQczVW5pdHMgMjAvMjEgVGhlYWxlIExha2VzIEJ1c2luZXNzIFBhcmssIE1vdWxkZW4gV2F5ABRTdWxoYW1zdGVhZCwgUmVhZGluZwAHUkc3IDRHQg1kaXNwbGF5OmJsb2NrETAwNDQgMTE4IDk4MyA4NjAwZAIFD2QWBgIBDxYCHwgFGkxvZ0NsaWtlZCgiMTY3NjMwMTkiLCAiMiIpFgJmDxUBB0NvbnRhY3RkAgQPFgYfCAUaTG9nQ2xpa2VkKCIxNjc2MzAxOSIsICIxIikfCgUPLy93d3cudGVuZW8ubmV0HwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMTY3NjMwMTkiLCAiNSIpHwoFemh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9VW5pdHMgMjAyMSBUaGVhbGUgTGFrZXMgQnVzaW5lc3MgUGFyayBNb3VsZGVuIFdheSBTdWxoYW1zdGVhZCBSZWFkaW5nICBSRzcgNEdCIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUSUGxhdGludW0gSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILD2QWBGYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFA0FTQ2RkAg8PZBYCZg8VAhRodHRwOi8vd3d3LnRlbmVvLm5ldA13d3cudGVuZW8ubmV0ZAIrD2QWEmYPFQEIMjkyMjIzNTBkAgIPFQEQVHJ1c3R3YXZlIC0gRU1FQWQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcmV2VzdG1pbnN0ZXIgVG93ZXIsIDMgQWxiZXJ0IEVtYmFua21lbnQABkxvbmRvbgAHU0UxIDdTUAxkaXNwbGF5Om5vbmUAZAIFD2QWCgIBDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjIzNTAiLCAiMiIpHwloFgJmDxUBB0NvbnRhY3RkAgIPDxYCHwloZGQCBA8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyMzUwIiwgIjEiKR8JaBYCZg8VAQdXZWJzaXRlZAIFDw8WAh8JaGRkAgcPFgYfCAUaTG9nQ2xpa2VkKCIyOTIyMjM1MCIsICI1IikfCgVhaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj1XZXN0bWluc3RlciBUb3dlciAzIEFsYmVydCBFbWJhbmttZW50IExvbmRvbiAgU0UxIDdTUCBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFElBsYXRpbnVtIElubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw9kFgRmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIBDw8WAh8GBQRDUFNQZGQCDw9kFgJmDxUCB2h0dHA6Ly8AZAIsD2QWEmYPFQEIMjE4NDI0NTlkAgIPFQEYVHJ1c3R3YXZlIEhvbGRpbmdzLCBJbmMuZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VByZXZXN0bWluc3RlciBUb3dlciwgMyBBbGJlcnQgRW1iYW5rbWVudAAGTG9uZG9uAAdTRTEgN1NQDWRpc3BsYXk6YmxvY2sMODQ1IDQ1NiA5NjExZAIFD2QWBgIBDxYCHwgFGkxvZ0NsaWtlZCgiMjE4NDI0NTkiLCAiMiIpFgJmDxUBB0NvbnRhY3RkAgQPFgYfCAUaTG9nQ2xpa2VkKCIyMTg0MjQ1OSIsICIxIikfCgUTLy93d3cudHJ1c3R3YXZlLmNvbR8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRpMb2dDbGlrZWQoIjIxODQyNDU5IiwgIjUiKR8KBWFodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%%2Fc2FkZHI9JmRhZGRyPVRlY3RvbmljIFBsYWNlIEhvbHlwb3J0IFJvYWQgTWFpZGVuaGVhZCAgU0w2IDJZRSBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCB2h0dHA6Ly8AZAI7D2QWEmYPFQEIMjkyMjI2MjhkAgIPFQEZQmFzZXJvY2sgSXQgU29sdXRpb25zIEx0ZGQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcxMXN0IEZsb29yOyBUaGUgU291dGggUXVheSBCdWlsZGluZywgNzcgTWFyc2ggV2FsbAAGTG9uZG9uAAdFMTQgOVNIDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjYyOCIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjI2MjgiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyNjI4IiwgIjUiKR8KBWtodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPTFzdCBGbG9vciBUaGUgU291dGggUXVheSBCdWlsZGluZyA3NyBNYXJzaCBXYWxsIExvbmRvbiAgRTE0IDlTSCBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCB2h0dHA6Ly8AZAI8D2QWEmYPFQEIMjkyMjI0NDdkAgIPFQEVQmVkcm9xIEx0ZCAocmVzZWxsZXIpZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBxEyMiBXZXN0ZXJuIEF2ZW51ZQAFUG9vbGUACEJIMTMgN0FODGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjQ0NyIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjI0NDciLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyNDQ3IiwgIjUiKR8KBU1odHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPTIyIFdlc3Rlcm4gQXZlbnVlIFBvb2xlICBCSDEzIDdBTiBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCB2h0dHA6Ly8AZAI9D2QWEmYPFQEIMjkyMjIzNzNkAgIPFQEWQmlvbiBTb2x1dGlvbnMgTGltaXRlZGQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcUNzEtNzUgU2hlbHRvbiBTdHJlZXQABkxvbmRvbgAIV0MySCA5SlEMZGlzcGxheTpub25lAGQCBQ9kFgoCAQ8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyMzczIiwgIjIiKR8JaBYCZg8VAQdDb250YWN0ZAICDw8WAh8JaGRkAgQPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjM3MyIsICIxIikfCWgWAmYPFQEHV2Vic2l0ZWQCBQ8PFgIfCWhkZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjkyMjIzNzMiLCAiNSIpHwoFUGh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9NzE3NSBTaGVsdG9uIFN0cmVldCBMb25kb24gIFdDMkggOUpRIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAj4PZBYSZg8VAQgyOTIyMjQ2NWQCAg8VARdCbG9jayBTb2x1dGlvbnMgTGltaXRlZGQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcTMTQgU2hlcGhlcmRlc3MgV2FsawAGTG9uZG9uAAdOMSAgN0xCDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjQ2NSIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjI0NjUiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyNDY1IiwgIjUiKR8KBU9odHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPTE0IFNoZXBoZXJkZXNzIFdhbGsgTG9uZG9uICBOMSAgN0xCIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAj8PZBYSZg8VAQgyNjMxNzc1NGQCAg8VAQ1Cb3h4ZSBMaW1pdGVkZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBxRNb29yIEhvdXNlLCBHb29zZSBMbgAEWW9yawAIWU82MSAxRVQNZGlzcGxheTpibG9jawswMTM0NzgxMjEwMGQCBQ9kFgYCAQ8WAh8IBRpMb2dDbGlrZWQoIjI2MzE3NzU0IiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGkxvZ0NsaWtlZCgiMjYzMTc3NTQiLCAiMSIpHwoFDy8vd3d3LnNibC5jby51ax8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRpMb2dDbGlrZWQoIjI2MzE3NzU0IiwgIjUiKR8KBU5odHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPU1vb3IgSG91c2UgR29vc2UgTG4gWW9yayAgWU82MSAxRVQgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAhRodHRwOi8vd3d3LnNibC5jby51aw13d3cuc2JsLmNvLnVrZAJAD2QWEmYPFQEIMjkyMjI2ODFkAgIPFQEKQlNMLUlUIEx0ZGQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcWU3VpdGUgMjsgSXJvbnN0b25lIFdheQALTm9ydGhhbXB0b24AB05ONiA5VUQMZGlzcGxheTpub25lAGQCBQ9kFgoCAQ8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyNjgxIiwgIjIiKR8JaBYCZg8VAQdDb250YWN0ZAICDw8WAh8JaGRkAgQPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjY4MSIsICIxIikfCWgWAmYPFQEHV2Vic2l0ZWQCBQ8PFgIfCWhkZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjkyMjI2ODEiLCAiNSIpHwoFVmh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9U3VpdGUgMiBJcm9uc3RvbmUgV2F5IE5vcnRoYW1wdG9uICBOTjYgOVVEIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAkEPZBYSZg8VAQgyOTIyMjM2M2QCAg8VARdCeXRlcyBTZWN1cml0eSBQYXJ0bmVyc2QCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcbUGFjaWZpYyBIb3VzZTsgSW1wZXJpYWwgV2F5AAdSZWFkaW5nAAdSRzIgMFREDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjM2MyIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjIzNjMiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyMzYzIiwgIjUiKR8KBVdodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPVBhY2lmaWMgSG91c2UgSW1wZXJpYWwgV2F5IFJlYWRpbmcgIFJHMiAwVEQgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCQg9kFhJmDxUBCDI5MjIyNTk1ZAICDxUBDUNhbXdvcnRoIEx0ZC5kAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHJ1RoZSBXaGVlbGhvdXNlOyBCb25kcyBNaWxsIEJyaXN0b2wgUm9hZAAKU3RvbmVob3VzZQAIR0wxMCAzUkYMZGlzcGxheTpub25lAGQCBQ9kFgoCAQ8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyNTk1IiwgIjIiKR8JaBYCZg8VAQdDb250YWN0ZAICDw8WAh8JaGRkAgQPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjU5NSIsICIxIikfCWgWAmYPFQEHV2Vic2l0ZWQCBQ8PFgIfCWhkZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjkyMjI1OTUiLCAiNSIpHwoFZ2h0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9VGhlIFdoZWVsaG91c2UgQm9uZHMgTWlsbCBCcmlzdG9sIFJvYWQgU3RvbmVob3VzZSAgR0wxMCAzUkYgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCQw9kFhJmDxUBCDIzNjcxNDcxZAICDxUBLkNhcGl0YSBJVCBFbnRlcnByaXNlIFNlcnZpY2VzIChOVFMpIChSRVNFTExFUilkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHETMwIEJlcm5lcnMgU3RyZWV0AAZMb25kb24AB1cxVCAzTFINZGlzcGxheTpibG9jawswNzU5NjMyNDAyMWQCBQ9kFgYCAQ8WAh8IBRpMb2dDbGlrZWQoIjIzNjcxNDcxIiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGkxvZ0NsaWtlZCgiMjM2NzE0NzEiLCAiMSIpHwoFEi8vd3d3LmNhcGl0YS5jby51ax8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRpMb2dDbGlrZWQoIjIzNjcxNDcxIiwgIjUiKR8KBU1odHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPTMwIEJlcm5lcnMgU3RyZWV0IExvbmRvbiAgVzFUIDNMUiBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCF2h0dHA6Ly93d3cuY2FwaXRhLmNvLnVrEHd3dy5jYXBpdGEuY28udWtkAkQPZBYSZg8VAQgyOTIyMjQ4MWQCAg8VAQpDYXBpdG8gTHRkZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBw5DYXB1dGhhbGwgUm9hZAAKTGl2aW5nc3RvbgAIRUg1NCA4QVMMZGlzcGxheTpub25lAGQCBQ9kFgoCAQ8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyNDgxIiwgIjIiKR8JaBYCZg8VAQdDb250YWN0ZAICDw8WAh8JaGRkAgQPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjQ4MSIsICIxIikfCWgWAmYPFQEHV2Vic2l0ZWQCBQ8PFgIfCWhkZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjkyMjI0ODEiLCAiNSIpHwoFT2h0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9Q2FwdXRoYWxsIFJvYWQgTGl2aW5nc3RvbiAgRUg1NCA4QVMgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCRQ9kFhJmDxUBCDI5MjIyMzMxZAICDxUBFkNoYXJsZXMgU3F1YXJlIExpbWl0ZWRkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHMENoYXJsZXMgU3F1YXJlIEx0ZDsgMjItMjMgTGl0dGxlIFBvcnRsYW5kIFN0cmVldAAGTG9uZG9uAAdXMVcgOEJVDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjMzMSIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjIzMzEiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyMzMxIiwgIjUiKR8KBWpodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPUNoYXJsZXMgU3F1YXJlIEx0ZCAyMjIzIExpdHRsZSBQb3J0bGFuZCBTdHJlZXQgTG9uZG9uICBXMVcgOEJVIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAkYPZBYSZg8VAQgxNjc2Mjk1OGQCAg8VARBDaXNpbGlvbiBMaW1pdGVkZAIDDxYCHwYFDFNhbGVzIE9mZmljZWQCBA8VBzNDaXNpbGlvbiBMdGQgMTd0aCBGbG9vciBIZXJvbiBUb3dlciAxMTAgQmlzaG9wc2dhdGUABkxvbmRvbgAIRUMyTiA0QVkNZGlzcGxheTpibG9jawswMTM3MjIwMTExNWQCBQ9kFgYCAQ8WAh8IBRpMb2dDbGlrZWQoIjE2NzYyOTU4IiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGkxvZ0NsaWtlZCgiMTY3NjI5NTgiLCAiMSIpHwoFEi8vd3d3LmNpc2lsaW9uLmNvbR8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRpMb2dDbGlrZWQoIjE2NzYyOTU4IiwgIjUiKR8KBXBodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPUNpc2lsaW9uIEx0ZCAxN3RoIEZsb29yIEhlcm9uIFRvd2VyIDExMCBCaXNob3BzZ2F0ZSBMb25kb24gIEVDMk4gNEFZIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIXaHR0cDovL3d3dy5jaXNpbGlvbi5jb20Qd3d3LmNpc2lsaW9uLmNvbWQCRw9kFhJmDxUBCDE2NzYyOTU5ZAICDxUBEENpc2lsaW9uIExpbWl0ZWRkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHHUNpc2lsaW9uIEhvdXNlIEd1aWxkZm9yZCBSb2FkAAtMZWF0aGVyaGVhZAAIS1QyMiA5VVQNZGlzcGxheTpibG9jaxF7NDR9MDg3MC0xNTItNTc1MGQCBQ9kFgYCAQ8WAh8IBRpMb2dDbGlrZWQoIjE2NzYyOTU5IiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGkxvZ0NsaWtlZCgiMTY3NjI5NTkiLCAiMSIpHwoFEi8vd3d3LmNpc2lsaW9uLmNvbR8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRpMb2dDbGlrZWQoIjE2NzYyOTU5IiwgIjUiKR8KBV9odHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%%2Fc2FkZHI9JmRhZGRyPVd5Y29tYmUgTGFuZSBXb29idXJuIEdyZWVuICBIUDEwIDBISCBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCGWh0dHA6Ly93d3cuZGFpc3lncm91cC5jb20Sd3d3LmRhaXN5Z3JvdXAuY29tZAJTD2QWEmYPFQEIMTY3NjI5ODhkAgIPFQEFRGFpc3lkAgMPFgIfBgUMU2FsZXMgT2ZmaWNlZAIEDxUHHDI0MCBCbGFja2ZyaWFyc0xvbmRvblNFMSA4TlcABkxvbmRvbgAHU0UxIDhOVw1kaXNwbGF5OmJsb2NrCzA3NzY5NjQ0ODM1ZAIFD2QWBgIBDxYCHwgFGkxvZ0NsaWtlZCgiMTY3NjI5ODgiLCAiMiIpFgJmDxUBB0NvbnRhY3RkAgQPFgYfCAUaTG9nQ2xpa2VkKCIxNjc2Mjk4OCIsICIxIikfCgUULy93d3cuZGFpc3lncm91cC5jb20fCwUGX2JsYW5rFgJmDxUBB1dlYnNpdGVkAgcPFgYfCAUaTG9nQ2xpa2VkKCIxNjc2Mjk4OCIsICI1IikfCgVYaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj0yNDAgQmxhY2tmcmlhcnNMb25kb25TRTEgOE5XIExvbmRvbiAgU0UxIDhOVyBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCGWh0dHA6Ly93d3cuZGFpc3lncm91cC5jb20Sd3d3LmRhaXN5Z3JvdXAuY29tZAJUD2QWEmYPFQEIMjkyMjI2MTZkAgIPFQEMRG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%2Fc2FkZHI9JmRhZGRyPUhpZ2ggRWRnZSBDb3VydCBEZXJieSAgREU1NiAyQlcgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCWA9kFhJmDxUBCDI5MjIyMzgzZAICDxUBEURpZ2l0YWxwaG9iaWEgTHRkZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VByxTdWl0ZSAyMjA7IDk5IFBhcmsgRHJpdmUgTWlsdG9uIFBhcmssIE1pbHRvbgAIQWJpbmdkb24ACE9YMTQgNFJZDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjM4MyIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjIzODMiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyMzgzIiwgIjUiKR8KBWlodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPVN1aXRlIDIyMCA5OSBQYXJrIERyaXZlIE1pbHRvbiBQYXJrIE1pbHRvbiBBYmluZ2RvbiAgT1gxNCA0UlkgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCWQ9kFhJmDxUBCDI5MjIyMzEwZAICDxUBHURvd25sYW5kIE5ldHdvcmsgU2VydmljZXMgTHRkZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBxI2IEJpc2hvcHN0b25lIFJvYWQAB1NlYWZvcmQACEJOMjUgMlVCDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjMxMCIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjIzMTAiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyMzEwIiwgIjUiKR8KBVBodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPTYgQmlzaG9wc3RvbmUgUm9hZCBTZWFmb3JkICBCTjI1IDJVQiBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCB2h0dHA6Ly8AZAJaD2QWEmYPFQEIMjkyMjI1OTRkAgIPFQESRU9TIElUUyAocmVzZWxsZXIpZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VByExMCBDYXNjdW0gQ3Jlc2NlbnQsIFRoZSBCb3VsZXZhcmQACUJhbmJyaWRnZQAIQlQzMiA0R0wMZGlzcGxheTpub25lAGQCBQ9kFgoCAQ8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyNTk0IiwgIjIiKR8JaBYCZg8VAQdDb250YWN0ZAICDw8WAh8JaGRkAgQPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjU5NCIsICIxIikfCWgWAmYPFQEHV2Vic2l0ZWQCBQ8PFgIfCWhkZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjkyMjI1OTQiLCAiNSIpHwoFYGh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9MTAgQ2FzY3VtIENyZXNjZW50IFRoZSBCb3VsZXZhcmQgQmFuYnJpZGdlICBCVDMyIDRHTCBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCB2h0dHA6Ly8AZAJbD2QWEmYPFQEIMjk4MTQzNzhkAgIPFQEVRXJnbyBDb21wdXRpbmcgVUsgTHRkZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBy9Vbml0IDEsIFdoZWF0Y3JvZnQgQnVzaW5lc3MgUGFyazsgTGFuZG1lcmUgTGFuZQAKTm90dGluZ2hhbQAITkcxMiA0REcMZGlzcGxheTpub25lAGQCBQ9kFgoCAQ8WBB8IBRpMb2dDbGlrZWQoIjI5ODE0Mzc4IiwgIjIiKR8JaBYCZg8VAQdDb250YWN0ZAICDw8WAh8JaGRkAgQPFgQfCAUaTG9nQ2xpa2VkKCIyOTgxNDM3OCIsICIxIikfCWgWAmYPFQEHV2Vic2l0ZWQCBQ8PFgIfCWhkZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjk4MTQzNzgiLCAiNSIpHwoFbmh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9VW5pdCAxIFdoZWF0Y3JvZnQgQnVzaW5lc3MgUGFyayBMYW5kbWVyZSBMYW5lIE5vdHRpbmdoYW0gIE5HMTIgNERHIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAlwPZBYSZg8VAQgyOTIyMjY0NGQCAg8VARRFVk9URUsgVUsgKHJlc2VsbGVyKWQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcXNDgzIEdyZWVuIExhbmVzIE4xMyA0QlMABkxvbmRvbgAHTjEzIDRCUwxkaXNwbGF5Om5vbmUAZAIFD2QWCgIBDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjI2NDQiLCAiMiIpHwloFgJmDxUBB0NvbnRhY3RkAgIPDxYCHwloZGQCBA8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyNjQ0IiwgIjEiKR8JaBYCZg8VAQdXZWJzaXRlZAIFDw8WAh8JaGRkAgcPFgYfCAUaTG9nQ2xpa2VkKCIyOTIyMjY0NCIsICI1IikfCgVTaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj00ODMgR3JlZW4gTGFuZXMgTjEzIDRCUyBMb25kb24gIE4xMyA0QlMgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCXQ9kFhJmDxUBCDIxOTY0ODY2ZAICDxUBDUV4cG9uZW50aWFsLWVkAgMPFgIfBgUMU2FsZXMgT2ZmaWNlZAIEDxUHEDMgSGFyZG1hbiBTdHJlZXQACk1hbmNoZXN0ZXIAB00zICAzSEYNZGlzcGxheTpibG9jaw00NCAxNjE2Njk0MDUwZAIFD2QWBgIBDxYCHwgFGkxvZ0NsaWtlZCgiMjE5NjQ4NjYiLCAiMiIpFgJmDxUBB0NvbnRhY3RkAgQPFgYfCAUaTG9nQ2xpa2VkKCIyMTk2NDg2NiIsICIxIikfCgUXLy93d3cuZXhwb25lbnRpYWwtZS5jb20fCwUGX2JsYW5rFgJmDxUBB1dlYnNpdGVkAgcPFgYfCAUaTG9nQ2xpa2VkKCIyMTk2NDg2NiIsICI1IikfCgVQaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj0zIEhhcmRtYW4gU3RyZWV0IE1hbmNoZXN0ZXIgIE0zICAzSEYgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAhxodHRwOi8vd3d3LmV4cG9uZW50aWFsLWUuY29tFXd3dy5leHBvbmVudGlhbC1lLmNvbWQCXg9kFhJmDxUBCDIxOTY5NzQzZAICDxUBDUV4cG9uZW50aWFsLWVkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHEDEwMCBMZW1hbiBTdHJlZXQABkxvbmRvbgAHRTEgIDhFVQ1kaXNwbGF5OmJsb2NrDTQ0IDIwNzA5NjQxMDBkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIyMTk2OTc0MyIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjIxOTY5NzQzIiwgIjEiKR8KBRcvL3d3dy5leHBvbmVudGlhbC1lLmNvbR8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRpMb2dDbGlrZWQoIjIxOTY5NzQzIiwgIjUiKR8KBUxodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPTEwMCBMZW1hbiBTdHJlZXQgTG9uZG9uICBFMSAgOEVVIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIcaHR0cDovL3d3dy5leHBvbmVudGlhbC1lLmNvbRV3d3cuZXhwb25lbnRpYWwtZS5jb21kAl8PZBYSZg8VAQgyOTIyMjQ5M2QCAg8VARNFWlBDIEx0ZCAocmVzZWxsZXIpZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBxUyIENyb3NzIFdheVBldHRzIFdvb2QACU9ycGluZ3RvbgAHQlI1IDFQRgxkaXNwbGF5Om5vbmUAZAIFD2QWCgIBDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjI0OTMiLCAiMiIpHwloFgJmDxUBB0NvbnRhY3RkAgIPDxYCHwloZGQCBA8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyNDkzIiwgIjEiKR8JaBYCZg8VAQdXZWJzaXRlZAIFDw8WAh8JaGRkAgcPFgYfCAUaTG9nQ2xpa2VkKCIyOTIyMjQ5MyIsICI1IikfCgVUaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj0yIENyb3NzIFdheVBldHRzIFdvb2QgT3JwaW5ndG9uICBCUjUgMVBGIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAmAPZBYSZg8VAQgyOTIyMjU4NmQCAg8VARpGbG93IENvbW11bmljYXRpb25zIFVLIEx0ZGQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcuUHVuY2hib3dsIDEzMCBQdW5jaGJvd2wgUGFyazsgQ2hlcnJ5IFRyZWUgTGFuZQAPSGVtZWwgSGVtcHN0ZWFkAAdIUDIgN0VVDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjU4NiIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjI1ODYiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyNTg2IiwgIjUiKR8KBXJodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPVB1bmNoYm93bCAxMzAgUHVuY2hib3dsIFBhcmsgQ2hlcnJ5IFRyZWUgTGFuZSBIZW1lbCBIZW1wc3RlYWQgIEhQMiA3RVUgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCYQ9kFhJmDxUBCDIzMzI5NjU5ZAICDxUBEUZ1bGxQcm94eSBMaW1pdGVkZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBxQxIFdlc3QgUmVnZW50IFN0cmVldAAHR2xhc2dvdwAHRzIgIDFSVw1kaXNwbGF5OmJsb2NrDSs0NDE0MTIxMjEwMTBkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIyMzMyOTY1OSIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjIzMzI5NjU5IiwgIjEiKR8KBRMvL3d3dy5mdWxscHJveHkuY29tHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjMzMjk2NTkiLCAiNSIpHwoFUWh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9MSBXZXN0IFJlZ2VudCBTdHJlZXQgR2xhc2dvdyAgRzIgIDFSVyBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCGGh0dHA6Ly93d3cuZnVsbHByb3h5LmNvbRF3d3cuZnVsbHByb3h5LmNvbWQCYg9kFhJmDxUBCDE4NjA0NDcyZAICDxUBFkhhcmR3YXJlIEdyb3VwIExpbWl0ZWRkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHOkhhcmR3YXJlIEdyb3VwV2VsbGluZ3RvbiBIb3VzZUtlbWJsZSBFbnRlcnByaXNlIFBhcmtLZW1ibGUAC0NpcmVuY2VzdGVyAAdHTDcgNkJRDWRpc3BsYXk6YmxvY2sLMDEyODU3NzE2MDBkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIxODYwNDQ3MiIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjE4NjA0NDcyIiwgIjEiKR8KBRIvL3d3dy5oYXJkd2FyZS5jb20fCwUGX2JsYW5rFgJmDxUBB1dlYnNpdGVkAgcPFgYfCAUaTG9nQ2xpa2VkKCIxODYwNDQ3MiIsICI1IikfCgV7aHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj1IYXJkd2FyZSBHcm91cFdlbGxpbmd0b24gSG91c2VLZW1ibGUgRW50ZXJwcmlzZSBQYXJrS2VtYmxlIENpcmVuY2VzdGVyICBHTDcgNkJRIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIXaHR0cDovL3d3dy5oYXJkd2FyZS5jb20Qd3d3LmhhcmR3YXJlLmNvbWQCYw9kFhJmDxUBCDI5MjIyMzc3ZAICDxUBGEhpZ2ggUG9pbnQgU29sdXRpb25zIEx0ZGQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcONSBPY2toYW0gRHJpdmUACUdyZWVuZm9yZAAHVUI2IDBGRAxkaXNwbGF5Om5vbmUAZAIFD2QWCgIBDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjIzNzciLCAiMiIpHwloFgJmDxUBB0NvbnRhY3RkAgIPDxYCHwloZGQCBA8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyMzc3IiwgIjEiKR8JaBYCZg8VAQ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%2Fc2FkZHI9JmRhZGRyPVRlcnJ5IFN0cmVldCBTaGVmZmllbGQgIFM5ICAyQlUgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAhlodHRwOi8vd3d3LnVrLmluc2lnaHQuY29tEnd3dy51ay5pbnNpZ2h0LmNvbWQCaA9kFhJmDxUBCDIwMzQ5MTcyZAICDxUBG0luc2lnaHQgRGlyZWN0IChVSykgTGltaXRlZGQCAw8WAh8GBQxTYWxlcyBPZmZpY2VkAgQPFQcOSGFyZWZpZWxkIFJvYWQACFV4YnJpZGdlAAdVQjggMVBIDWRpc3BsYXk6YmxvY2sNMDg0NCA0NzIgMzI2MGQCBQ9kFgYCAQ8WAh8IBRpMb2dDbGlrZWQoIjIwMzQ5MTcyIiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGkxvZ0NsaWtlZCgiMjAzNDkxNzIiLCAiMSIpHwoFFC8vd3d3LnVrLmluc2lnaHQuY29tHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjAzNDkxNzIiLCAiNSIpHwoFTGh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9SGFyZWZpZWxkIFJvYWQgVXhicmlkZ2UgIFVCOCAxUEggR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAhlodHRwOi8vd3d3LnVrLmluc2lnaHQuY29tEnd3dy51ay5pbnNpZ2h0LmNvbWQCaQ9kFhJmDxUBCDI5MjIyNTE1ZAICDxUBEkludGVsbG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%2Fc2FkZHI9JmRhZGRyPVJvc2EgMTgxOSBNdWxiZXJyeSBCdXNpbmVzcyBQYXJrIEZpc2hwb25kcyBSb2FkIFdva2luZ2hhbSAgUkc0MSAyR1kgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCbQ9kFhJmDxUBCDI5MjIyNDU0ZAICDxUBFUtEREkgRXVyb3BlIChwYXJ0bmVyKWQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcxN1RoIEZsb29yLCBUb3dlciBCcmlkZ2UgSG91c2U7IFN0LiBLYXRoYXJpbmVzIFdheQAGTE9ORE9OAAdFMVcgMUFBDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjQ1NCIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjI0NTQiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyNDU0IiwgIjUiKR8KBWpodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%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%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9vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj1IZXJzaGFtIFBsYWNlIFRlY2hub2xvZ3kgUGFyayBNb2xlc2V5IFJvYWQgV2FsdG9uT25UaGFtZXMgIEtUMTIgNFJaIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAnUPZBYSZg8VAQgyOTIyMjQzN2QCAg8VAQ5Nb29uIENvbXB1dGVyc2QCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQctMSBQcm9zcGVjdCBDb3VydCBDb3VydGVlbmhhbGwgUm9hZDsgQmxpc3dvcnRoAAtOb3J0aGFtcHRvbgAHTk43IDNERwxkaXNwbGF5Om5vbmUAZAIFD2QWCgIBDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjI0MzciLCAiMiIpHwloFgJmDxUBB0NvbnRhY3RkAgIPDxYCHwloZGQCBA8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyNDM3IiwgIjEiKR8JaBYCZg8VAQdXZWJzaXRlZAIFDw8WAh8JaGRkAgcPFgYfCAUaTG9nQ2xpa2VkKCIyOTIyMjQzNyIsICI1IikfCgVtaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj0xIFByb3NwZWN0IENvdXJ0IENvdXJ0ZWVuaGFsbCBSb2FkIEJsaXN3b3J0aCBOb3J0aGFtcHRvbiAgTk43IDNERyBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCB2h0dHA6Ly8AZAJ2D2QWEmYPFQEIMTY3NjM1NjBkAgIPFQESTVRJIFRFQ0hOT0xPR1kgTFREZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBy5SaXZlcnZpZXcgSG91c2UsIFdleXNpZGUgUGFyayAgQ2F0dGVzaGFsbCBMYW5lAAlHb2RhbG1pbmcAB0dVNyAxWEUNZGlzcGxheTpibG9jaxArNDQgMDE0ODMgNTIwMjAwZAIFD2QWBgIBDxYCHwgFGkxvZ0NsaWtlZCgiMTY3NjM1NjAiLCAiMiIpFgJmDxUBB0NvbnRhY3RkAgQPFgYfCAUaTG9nQ2xpa2VkKCIxNjc2MzU2MCIsICIxIikfCgUNLy93d3cubXRpLmNvbR8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRpMb2dDbGlrZWQoIjE2NzYzNTYwIiwgIjUiKR8KBWxodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPVJpdmVydmlldyBIb3VzZSBXZXlzaWRlIFBhcmsgIENhdHRlc2hhbGwgTGFuZSBHb2RhbG1pbmcgIEdVNyAxWEUgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAhJodHRwOi8vd3d3Lm10aS5jb20Ld3d3Lm10aS5jb21kAncPZBYSZg8VAQgyOTIyMjUyMWQCAg8VASFNdXNzaW5obyBMdGQgIChUcmFkaW5nIGFzIE5ldGV4cClkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHHzQgU3VjY29tYnMgUGxhY2UgU291dGh2aWV3IFJvYWQACldhcmxpbmdoYW0AB0NSNiA5SlEMZGlzcGxheTpub25lAGQCBQ9kFgoCAQ8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyNTIxIiwgIjIiKR8JaBYCZg8VAQdDb250YWN0ZAICDw8WAh8JaGRkAgQPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjUyMSIsICIxIikfCWgWAmYPFQEHV2Vic2l0ZWQCBQ8PFgIfCWhkZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjkyMjI1MjEiLCAiNSIpHwoFX2h0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9NCBTdWNjb21icyBQbGFjZSBTb3V0aHZpZXcgUm9hZCBXYXJsaW5naGFtICBDUjYgOUpRIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAngPZBYSZg8VAQgyMTQ3NDE3NGQCAg8VAQlOQ0MgR3JvdXBkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHD1doaXRlIEhhcnQgTGFuZQALQmFzaW5nc3Rva2UACFJHMjEgNEFGDWRpc3BsYXk6YmxvY2sLMDc3ODA2MDA2NDhkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIyMTQ3NDE3NCIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjIxNDc0MTc0IiwgIjEiKR8KBRIvL3d3dy5uY2Nncm91cC5jb20fCwUGX2JsYW5rFgJmDxUBB1dlYnNpdGVkAgcPFgYfCAUaTG9nQ2xpa2VkKCIyMTQ3NDE3NCIsICI1IikfCgVRaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj1XaGl0ZSBIYXJ0IExhbmUgQmFzaW5nc3Rva2UgIFJHMjEgNEFGIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIXaHR0cDovL3d3dy5uY2Nncm91cC5jb20Qd3d3Lm5jY2dyb3VwLmNvbWQCeQ9kFhJmDxUBCDI3MTQzNzk1ZAICDxUBG05ldCBDb25zdWx0aW5nIEx0ZDogUGFydG5lcmQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQc9VmlsbGFnZSBXYXkgNGMgR3JlZW5tZWFkb3cgU3ByaW5ncyBCdXNpbmVzcyBQYXJrOyBUb25nd3lubGFpcwAHQ0FSRElGRgAIQ0YxNSA3TkUMZGlzcGxheTpub25lAGQCBQ9kFgoCAQ8WBB8IBRpMb2dDbGlrZWQoIjI3MTQzNzk1IiwgIjIiKR8JaBYCZg8VAQdDb250YWN0ZAICDw8WAh8JaGRkAgQPFgQfCAUaTG9nQ2xpa2VkKCIyNzE0Mzc5NSIsICIxIikfCWgWAmYPFQEHV2Vic2l0ZWQCBQ8PFgIfCWhkZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjcxNDM3OTUiLCAiNSIpHwoFemh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9VmlsbGFnZSBXYXkgNGMgR3JlZW5tZWFkb3cgU3ByaW5ncyBCdXNpbmVzcyBQYXJrIFRvbmd3eW5sYWlzIENBUkRJRkYgIENGMTUgN05FIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAnoPZBYSZg8VAQgyMTQ3NTYzOGQCAg8VAQxOZXQtQ3RybCBMdGRkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHEjUgR3JleSBGcmlhcnMgUm9hZAAHSXBzd2ljaAAHSVAxIDFVUA1kaXNwbGF5OmJsb2NrDDAxNDczIDI4MTIxMWQCBQ9kFgYCAQ8WAh8IBRpMb2dDbGlrZWQoIjIxNDc1NjM4IiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGkxvZ0NsaWtlZCgiMjE0NzU2MzgiLCAiMSIpHwoFEi8vd3d3Lm5ldC1jdHJsLmNvbR8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRpMb2dDbGlrZWQoIjIxNDc1NjM4IiwgIjUiKR8KBU9odHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPTUgR3JleSBGcmlhcnMgUm9hZCBJcHN3aWNoICBJUDEgMVVQIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIXaHR0cDovL3d3dy5uZXQtY3RybC5jb20Qd3d3Lm5ldC1jdHJsLmNvbWQCew9kFhJmDxUBCDIxNDc0OTY1ZAICDxUBDU5ldHRpdHVkZSBMdGRkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHHDEgSmVwaHNvbiBDb3VydFRhbmNyZWQgQ2xvc2UADFdhcndpY2tzaGlyZQAIQ1YzMSAzUloNZGlzcGxheTpibG9jawwwNzU0NSA0MzEyODVkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIyMTQ3NDk2NSIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjIxNDc0OTY1IiwgIjEiKR8KBRMvL3d3dy5uZXR0aXR1ZGUuY29tHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjE0NzQ5NjUiLCAiNSIpHwoFX2h0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9MSBKZXBoc29uIENvdXJ0VGFuY3JlZCBDbG9zZSBXYXJ3aWNrc2hpcmUgIENWMzEgM1JaIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIYaHR0cDovL3d3dy5uZXR0aXR1ZGUuY29tEXd3dy5uZXR0aXR1ZGUuY29tZAJ8D2QWEmYPFQEIMj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%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5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAoQBD2QWEmYPFQEIMjU5MTU5NDBkAgIPFQEeUGluZyBOZXR3b3JrIFNvbHV0aW9ucyBMaW1pdGVkZAIDDxYCHwYFDFNhbGVzIE9mZmljZWQCBA8VBxVBcm5oYWxsIEJ1c2luZXNzIFBhcmsACEFiZXJkZWVuAAhBQjMyIDZVRg1kaXNwbGF5OmJsb2NrCzAxNDEzNTQxNTc1ZAIFD2QWBgIBDxYCHwgFGkxvZ0NsaWtlZCgiMjU5MTU5NDAiLCAiMiIpFgJmDxUBB0NvbnRhY3RkAgQPFgYfCAUaTG9nQ2xpa2VkKCIyNTkxNTk0MCIsICIxIikfCgURLy93d3cucGluZy1ucy5jb20fCwUGX2JsYW5rFgJmDxUBB1dlYnNpdGVkAgcPFgYfCAUaTG9nQ2xpa2VkKCIyNTkxNTk0MCIsICI1IikfCgVUaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj1Bcm5oYWxsIEJ1c2luZXNzIFBhcmsgQWJlcmRlZW4gIEFCMzIgNlVGIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIWaHR0cDovL3d3dy5waW5nLW5zLmNvbQ93d3cucGluZy1ucy5jb21kAoUBD2QWEmYPFQEIMjU5MTU5NDFkAgIPFQEeUGluZyBOZXR3b3JrIFNvbHV0aW9ucyBMaW1pdGVkZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBwszIERvdmUgV3luZAAJQmVsbHNoaWxsAAdNTDQgM0ZCDWRpc3BsYXk6YmxvY2sLMDE0MTM1NDE1NzVkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIyNTkxNTk0MSIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjI1OTE1OTQxIiwgIjEiKR8KBREvL3d3dy5waW5nLW5zLmNvbR8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRpMb2dDbGlrZWQoIjI1OTE1OTQxIiwgIjUiKR8KBUpodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%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UgT2ZmaWNlIENhbXB1cyBQYXJhZ29uIEJ1c2luZXNzIFBhcmsgV2FrZWZpZWxkICBXRjEgMlVZIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAokBD2QWEmYPFQEIMjE0NzQxMTVkAgIPFQETUHJvZGVjIE5ldHdvcmtzIEx0ZGQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQc0VW5pdCA1LCBDaGFuY2VyeSBHYXRlIEJ1c2luZXNzIENlbnRyZSwgUnVzY29tYmUgUGFyawAHVHd5Zm9yZAAIUkcxMCA5TFQNZGlzcGxheTpibG9jaww0NDExODk2MjUwMDBkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIyMTQ3NDExNSIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjIxNDc0MTE1IiwgIjEiKR8KBRIvL3d3dy5wcm9kZWMuY28udWsfCwUGX2JsYW5rFgJmDxUBB1dlYnNpdGVkAgcPFgYfCAUaTG9nQ2xpa2VkKCIyMTQ3NDExNSIsICI1IikfCgVwaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj1Vbml0IDUgQ2hhbmNlcnkgR2F0ZSBCdXNpbmVzcyBDZW50cmUgUnVzY29tYmUgUGFyayBUd3lmb3JkICBSRzEwIDlMVCBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCF2h0dHA6Ly93d3cucHJvZGVjLmNvLnVrEHd3dy5wcm9kZWMuY28udWtkAooBD2QWEmYPFQEIMjMxOTYzNjVkAgIPFQENUmF6b3JibHVlIEx0ZGQCAw8WAh8GBQxTYWxlcyBPZmZpY2VkAgQPFQcOMiBDaGFwZWxsIExhbmUADFd5bnlhcmQgUGFyawAIVFMyMiA1RkcNZGlzcGxheTpibG9jawswMzMzMzQ0NjM0NGQCBQ9kFgYCAQ8WAh8IBRpMb2dDbGlrZWQoIjIzMTk2MzY1IiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGkxvZ0NsaWtlZCgiMjMxOTYzNjUiLCAiMSIpHwoFEy8vd3d3LnJhem9yYmx1ZS5jb20fCwUGX2JsYW5rFgJmDxUBB1dlYnNpdGVkAgcPFgYfCAUaTG9nQ2xpa2VkKCIyMzE5NjM2NSIsICI1IikfCgVRaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj0yIENoYXBlbGwgTGFuZSBXeW55YXJkIFBhcmsgIFRTMjIgNUZHIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIYaHR0cDovL3d3dy5yYXpvcmJsdWUuY29tEXd3dy5yYXpvcmJsdWUuY29tZAKLAQ9kFhJmDxUBCDIzMTk2MzY2ZAICDxUBDVJhem9yYmx1ZSBMdGRkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHDzEyIEJhaWxleSBDb3VydAASQ2F0dGVyaWNrIEdhcnJpc29uAAdETDkgNFFMDWRpc3BsYXk6YmxvY2sLMDMzMzM0NDYzNDRkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIyMzE5NjM2NiIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjIzMTk2MzY2IiwgIjEiKR8KBRMvL3d3dy5yYXpvcmJsdWUuY29tHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjMxOTYzNjYiLCAiNSIpHwoFV2h0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9MTIgQmFpbGV5IENvdXJ0IENhdHRlcmljayBHYXJyaXNvbiAgREw5IDRRTCBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCGGh0dHA6Ly93d3cucmF6b3JibHVlLmNvbRF3d3cucmF6b3JibHVlLmNvbWQCjAEPZBYSZg8VAQgyMzE5NjM2N2QCAg8VAQ1SYXpvcmJsdWUgTHRkZAIDDxYCHwYFDFNhbGVzIE9mZmljZWQCBA8VBx1LaW5nc2xleSBIYWxsLCAyMCBCYWlsZXkgTGFuZQAKTWFuY2hlc3RlcgAHTTkwIDRBTg1kaXNwbGF5OmJsb2NrCzAzMzMzNDQ2MzQ0ZAIFD2QWBgIBDxYCHwgFGkxvZ0NsaWtlZCgiMjMxOTYzNjciLCAiMiIpFgJmDxUBB0NvbnRhY3RkAgQPFgYfCAUaTG9nQ2xpa2VkKCIyMzE5NjM2NyIsICIxIikfCgUTLy93d3cucmF6b3JibHVlLmNvbR8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRpMb2dDbGlrZWQoIjIzMTk2MzY3IiwgIjUiKR8KBVxodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPUtpbmdzbGV5IEhhbGwgMjAgQmFpbGV5IExhbmUgTWFuY2hlc3RlciAgTTkwIDRBTiBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCGGh0dHA6Ly93d3cucmF6b3JibHVlLmNvbRF3d3cucmF6b3JibHVlLmNvbWQCjQEPZBYSZg8VAQgyMzE5NjM2OGQCAg8VAQ1SYXpvcmJsdWUgTHRkZAIDDxYCHwYFDFNhbGVzIE9mZmljZWQCBA8VBw43IEFpcnBvcnQgV2VzdAAFTGVlZHMACExTMTkgN1pBDWRpc3BsYXk6YmxvY2sLMDMzMzM0NDYzNDRkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIyMzE5NjM2OCIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjIzMTk2MzY4IiwgIjEiKR8KBRMvL3d3dy5yYXpvcmJsdWUuY29tHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjMxOTYzNjgiLCAiNSIpHwoFSmh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9NyBBaXJwb3J0IFdlc3QgTGVlZHMgIExTMTkgN1pBIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIYaHR0cDovL3d3dy5yYXpvcmJsdWUuY29tEXd3dy5yYXpvcmJsdWUuY29tZAKOAQ9kFhJmDxUBCDI5MjIyNTg5ZAICDxUBGVJlY2FydGEgSVQgTHRkIChyZXNlbGxlcilkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHKVVuaXQgMyAmIDREdW5sZXkgSGlsbCBDb3VydFJhbm1vcmUgQ29tbW9uAAdEb3JraW5nAAdSSDUgNlNYDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjU4OSIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjI1ODkiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyNTg5IiwgIjUiKR8KBWVodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%%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%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%2Fc2FkZHI9JmRhZGRyPTJORCBGTE9PUiBUUklOSVRZIEJVSUxESU5HIDM5IFRBQkVSTkFDTEUgU1RSRUVUIExvbmRvbiAgRUMyQSA0QUEgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCpgEPZBYSZg8VAQgyOTIyMjM0MWQCAg8VARpUb3RhbCBEaXN0cmlidXRpb24gTGltaXRlZGQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcwU3VpdGUgMyBBbGNvcmEgQnVpbGRpbmc7IE11Y2tsb3cgSGlsbCwgSGFsZXNvd2VuAApCaXJtaW5naGFtAAdCNjIgOERHDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjM0MSIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjIzNDEiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyMzQxIiwgIjUiKR8KBW5odHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPVN1aXRlIDMgQWxjb3JhIEJ1aWxkaW5nIE11Y2tsb3cgSGlsbCBIYWxlc293ZW4gQmlybWluZ2hhbSAgQjYyIDhERyBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCB2h0dHA6Ly8AZAKnAQ9kFhJmDxUBCDI3NzQ2ODgyZAICDxUBH1RyYW5zIEV1cm9wZWFuIFRlY2hub2xvZ3kgKFRFVClkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHITNyZCBGbG9vciwxMTEgQ2hhcnRlcmhvdXNlIFN0cmVldAAGTG9uZG9uAAhFQzFNIDZBVw1kaXNwbGF5OmJsb2NrCzAyMDc1NTM5OTUwZAIFD2QWBgIBDxYCHwgFGkxvZ0NsaWtlZCgiMjc3NDY4ODIiLCAiMiIpFgJmDxUBB0NvbnRhY3RkAgQPFgYfCAUaTG9nQ2xpa2VkKCIyNzc0Njg4MiIsICIxIikfCgUPLy93d3cudGV0LmNvLnVrHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMjc3NDY4ODIiLCAiNSIpHwoFXWh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9M3JkIEZsb29yMTExIENoYXJ0ZXJob3VzZSBTdHJlZXQgTG9uZG9uICBFQzFNIDZBVyBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCFGh0dHA6Ly93d3cudGV0LmNvLnVrDXd3dy50ZXQuY28udWtkAqgBD2QWEmYPFQ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%2Fc2FkZHI9JmRhZGRyPTM3VGggRmxvb3IgMjUgQ2FuYWRhIFNxdWFyZSBMb25kb24gIEUxNCA1TFEgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCrgEPZBYSZg8VAQgyOTIyMjMxOWQCAg8VARpYZXJldGVjIE9mZmljZSBTeXN0ZW1zIEx0ZGQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQc3QXNocmlkZ2UgSG91c2U7IE9ha2xhbmRzIEJ1c2luZXNzIENlbnRyZSwgT2FrbGFuZHMgUGFyawAJV29raW5naGFtAAhSRzQxIDJGRAxkaXNwbGF5Om5vbmUAZAIFD2QWCgIBDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjIzMTkiLCAiMiIpHwloFgJmDxUBB0NvbnRhY3RkAgIPDxYCHwloZGQCBA8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyMzE5IiwgIjEiKR8JaBYCZg8VAQdXZWJzaXRlZAIFDw8WAh8JaGRkAgcPFgYfCAUaTG9nQ2xpa2VkKCIyOTIyMjMxOSIsICI1IikfCgV1aHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj1Bc2hyaWRnZSBIb3VzZSBPYWtsYW5kcyBCdXNpbmVzcyBDZW50cmUgT2FrbGFuZHMgUGFyayBXb2tpbmdoYW0gIFJHNDEgMkZEIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHD2QWBGYPFQENUGFydG5lciBMZXZlbGQCAQ8PFgIfBgUJSW5ub3ZhdG9yZGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUIUmVzZWxsZXJkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIHaHR0cDovLwBkAq8BD2QWEmYPFQEIMjkyMjIzNzVkAgIPFQEIWE1BIEx0ZC5kAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHJDcgSGFudGxleSBQYWdld2F5OyBPbGQgUGFya2J1cnkgTGFuZQAJU3QgQWxiYW5zAAdBTDIgMkRRDGRpc3BsYXk6bm9uZQBkAgUPZBYKAgEPFgQfCAUaTG9nQ2xpa2VkKCIyOTIyMjM3NSIsICIyIikfCWgWAmYPFQEHQ29udGFjdGQCAg8PFgIfCWhkZAIEDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjIzNzUiLCAiMSIpHwloFgJmDxUBB1dlYnNpdGVkAgUPDxYCHwloZGQCBw8WBh8IBRpMb2dDbGlrZWQoIjI5MjIyMzc1IiwgIjUiKR8KBWJodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPTcgSGFudGxleSBQYWdld2F5IE9sZCBQYXJrYnVyeSBMYW5lIFN0IEFsYmFucyAgQUwyIDJEUSBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw9kFgRmDxUBDVBhcnRuZXIgTGV2ZWxkAgEPDxYCHwYFCUlubm92YXRvcmRkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFCFJlc2VsbGVyZGQCCw8WAh8JaBYCZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCDw9kFgJmDxUCB2h0dHA6Ly8AZAKwAQ9kFhJmDxUBCDI2MjY3NDM1ZAICDxUBB1hwZXJ0ZXhkAgMPFgIfBgUMSGVhZHF1YXJ0ZXJzZAIEDxUHDjI2IEJyaWRnZSBSZCBFABJXZWx3eW4gR2FyZGVuIENpdHkAB0FMNyAxSEwNZGlzcGxheTpibG9jaw0wMjAzIDAyMSAwNzQ5ZAIFD2QWBgIBDxYCHwgFGkxvZ0NsaWtlZCgiMjYyNjc0MzUiLCAiMiIpFgJmDxUBB0NvbnRhY3RkAgQPFgYfCAUaTG9nQ2xpa2VkKCIyNjI2NzQzNSIsICIxIikfCgUTLy93d3cueHBlcnRleC5jby51ax8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRpMb2dDbGlrZWQoIjI2MjY3NDM1IiwgIjUiKR8KBVZodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%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oFUmh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9NDYgVGhyb2dtb3J0b24gQXZlbnVlIExvbmRvbiAgRUMyTiAyREwgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPZBYEZg8VAQ1QYXJ0bmVyIExldmVsZAIBDw8WAh8GBQlJbm5vdmF0b3JkZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQhSZXNlbGxlcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAh9odHRwOi8vd3d3Lnp1cml0ZWNobm9sb2dpZXMuY29tGHd3dy56dXJpdGVjaG5vbG9naWVzLmNvbWQCtAEPZBYSZg8VAQgxODM2MzA4MWQCAg8VAShBcnJvdyBFbnRlcnByaXNlIENvbXB1dGluZyBTb2x1dGlvbnMgTHRkZAIDDxYCHwYFDEhlYWRxdWFydGVyc2QCBA8VBw9CZWNrd2l0aCBLbm93bGUACUhhcnJvZ2F0ZQAHSEczIDFTQQ1kaXNwbGF5OmJsb2NrDDAxNDIzIDUxOTAwMGQCBQ9kFgYCAQ8WAh8IBRpMb2dDbGlrZWQoIjE4MzYzMDgxIiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGkxvZ0NsaWtlZCgiMTgzNjMwODEiLCAiMSIpHwoFFC8vV1dXLkFSUk9XRUNTLkNPLlVLHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMTgzNjMwODEiLCAiNSIpHwoFTmh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9QmVja3dpdGggS25vd2xlIEhhcnJvZ2F0ZSAgSEczIDFTQSBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw8WAh8JaBYCZg8VAQ1QYXJ0bmVyIExldmVsZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQtEaXN0cmlidXRvcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAhlodHRwOi8vV1dXLkFSUk9XRUNTLkNPLlVLEldXVy5BUlJPV0VDUy5DTy5VS2QCtQEPZBYSZg8VAQgxODM2MzA4MmQCAg8VAShBcnJvdyBFbnRlcnByaXNlIENvbXB1dGluZyBTb2x1dGlvbnMgTHRkZAIDDxYCHwYFDFNhbGVzIE9mZmljZWQCBA8VBwxGb3JkaGFtIFJvYWQACU5ld21hcmtldAAHQ0I4IDdBQQ1kaXNwbGF5OmJsb2NrDDAxNjM4IDU2OTYwMGQCBQ9kFgYCAQ8WAh8IBRpMb2dDbGlrZWQoIjE4MzYzMDgyIiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGkxvZ0NsaWtlZCgiMTgzNjMwODIiLCAiMSIpHwoFFC8vV1dXLkFSUk9XRUNTLkNPLlVLHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMTgzNjMwODIiLCAiNSIpHwoFS2h0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9Rm9yZGhhbSBSb2FkIE5ld21hcmtldCAgQ0I4IDdBQSBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw8WAh8JaBYCZg8VAQ1QYXJ0bmVyIExldmVsZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQtEaXN0cmlidXRvcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAhlodHRwOi8vV1dXLkFSUk9XRUNTLkNPLlVLEldXVy5BUlJPV0VDUy5DTy5VS2QCtgEPZBYSZg8VAQgxODM2MzA4M2QCAg8VAShBcnJvdyBFbnRlcnByaXNlIENvbXB1dGluZyBTb2x1dGlvbnMgTHRkZAIDDxYCHwYFDFNhbGVzIE9mZmljZWQCBA8VBw42IERvd2dhdGUgSGlsbAAGTG9uZG9uAAhFQzRSIDJTVQ1kaXNwbGF5OmJsb2NrDTAyMDcgNzg2IDM0MDBkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIxODM2MzA4MyIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjE4MzYzMDgzIiwgIjEiKR8KBRQvL1dXVy5BUlJPV0VDUy5DTy5VSx8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRpMb2dDbGlrZWQoIjE4MzYzMDgzIiwgIjUiKR8KBUtodHRwOi8vbWFwcy5nb29nbGUuY29tL21hcHM%2Fc2FkZHI9JmRhZGRyPTYgRG93Z2F0ZSBIaWxsIExvbmRvbiAgRUM0UiAyU1UgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPFgIfCWgWAmYPFQENUGFydG5lciBMZXZlbGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgULRGlzdHJpYnV0b3JkZAILDxYCHwloFgJmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIPD2QWAmYPFQIZaHR0cDovL1dXVy5BUlJPV0VDUy5DTy5VSxJXV1cuQVJST1dFQ1MuQ08uVUtkArcBD2QWEmYPFQEHNzg0NDgxNGQCAg8VAR1FeGNsdXNpdmUgTmV0d29ya3MgTGltaXRlZCBVS2QCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcbQWxyZXNmb3JkIEhvdXNlLCBNaWxsIExhbmUsAAVBbHRvbgAIR1UzNCAyUUoNZGlzcGxheTpibG9jawwwODQ1IDUyMTcyMTdkAgUPZBYGAgEPFgIfCAUZTG9nQ2xpa2VkKCI3ODQ0ODE0IiwgIjIiKRYCZg8VAQdDb250YWN0ZAIEDxYGHwgFGUxvZ0NsaWtlZCgiNzg0NDgxNCIsICIxIikfCgUeLy93d3cuZXhjbHVzaXZlLW5ldHdvcmtzLmNvLnVrHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGUxvZ0NsaWtlZCgiNzg0NDgxNCIsICI1IikfCgVVaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj1BbHJlc2ZvcmQgSG91c2UgTWlsbCBMYW5lIEFsdG9uICBHVTM0IDJRSiBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw8WAh8JaBYCZg8VAQ1QYXJ0bmVyIExldmVsZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQtEaXN0cmlidXRvcmRkAgsPZBYEZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUEQ1BTUGRkAg8PZBYCZg8VAiNodHRwOi8vd3d3LmV4Y2x1c2l2ZS1uZXR3b3Jrcy5jby51axx3d3cuZXhjbHVzaXZlLW5ldHdvcmtzLmNvLnVrZAK4AQ9kFhJmDxUBBzc4NDQ4MTVkAgIPFQEdRXhjbHVzaXZlIE5ldHdvcmtzIExpbWl0ZWQgVUtkAgMPFgIfBgUMU2FsZXMgT2ZmaWNlZAIEDxUHDzE0IE5hcGllciBDb3VydAAMQ2hlc3RlcmZpZWxkAAdTNDMgNFBaDWRpc3BsYXk6YmxvY2sMMDg0NSA1MjE3MjE3ZAIFD2QWBgIBDxYCHwgFGUxvZ0NsaWtlZCgiNzg0NDgxNSIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRlMb2dDbGlrZWQoIjc4NDQ4MTUiLCAiMSIpHwoFHi8vd3d3LmV4Y2x1c2l2ZS1uZXR3b3Jrcy5jby51ax8LBQZfYmxhbmsWAmYPFQEHV2Vic2l0ZWQCBw8WBh8IBRlMb2dDbGlrZWQoIjc4NDQ4MTUiLCAiNSIpHwoFUWh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9MTQgTmFwaWVyIENvdXJ0IENoZXN0ZXJmaWVsZCAgUzQzIDRQWiBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw8WAh8JaBYCZg8VAQ1QYXJ0bmVyIExldmVsZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQtEaXN0cmlidXRvcmRkAgsPZBYEZg8VARRTZXJ2aWNlIFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgUEQ1BTUGRkAg8PZBYCZg8VAiNodHRwOi8vd3d3LmV4Y2x1c2l2ZS1uZXR3b3Jrcy5jby51axx3d3cuZXhjbHVzaXZlLW5ldHdvcmtzLmNvLnVrZAK5AQ9kFhJmDxUBCDI5MjIyNjU1ZAICDxUBFU51YXdhcmUgKERpc3RyaWJ1dG9yKWQCAw8WAh8GBQxIZWFkcXVhcnRlcnNkAgQPFQcgMjMgU2t5bGluZXMgVmlsbGFnZSwgTGltZWhhcmJvdXIABkxvbmRvbgAHRTE0IDlUUwxkaXNwbGF5Om5vbmUAZAIFD2QWCgIBDxYEHwgFGkxvZ0NsaWtlZCgiMjkyMjI2NTUiLCAiMiIpHwloFgJmDxUBB0NvbnRhY3RkAgIPDxYCHwloZGQCBA8WBB8IBRpMb2dDbGlrZWQoIjI5MjIyNjU1IiwgIjEiKR8JaBYCZg8VAQdXZWJzaXRlZAIFDw8WAh8JaGRkAgcPFgYfCAUaTG9nQ2xpa2VkKCIyOTIyMjY1NSIsICI1IikfCgVbaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzP3NhZGRyPSZkYWRkcj0yMyBTa3lsaW5lcyBWaWxsYWdlIExpbWVoYXJib3VyIExvbmRvbiAgRTE0IDlUUyBHQh8LBQZfYmxhbmsWAmYPFQEKRGlyZWN0aW9uc2QCBw8WAh8JaBYCZg8VAQ1QYXJ0bmVyIExldmVsZAIJD2QWBGYPFQEMUGFydG5lciBUeXBlZAIBDw8WAh8GBQtEaXN0cmlidXRvcmRkAgsPFgIfCWgWAmYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAg8PZBYCZg8VAgdodHRwOi8vAGQCugEPZBYSZg8VAQgxMjM4MjY5NWQCAg8VATZXZXN0Y29uIEdyb3VwIEV1cm9wZWFuIE9wZXJhdGlvbnMgTHRkIChVbml0ZWQgS2luZ2RvbSlkAgMPFgIfBgUMU2FsZXMgT2ZmaWNlZAIEDxUHGEFzdHJhbCBUb3dlcnMsIEJldHRzIFdheQAHQ3Jhd2xleQAIUkgxMCA5VVkNZGlzcGxheTpibG9jaw8rNDQgMTI5MyA5MDYwMDFkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIxMjM4MjY5NSIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjEyMzgyNjk1IiwgIjEiKR8KBRwvL1VLLkNPTlZFUkdFTkNFLldFU1RDT04uQ09NHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMTIzODI2OTUiLCAiNSIpHwoFVWh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9QXN0cmFsIFRvd2VycyBCZXR0cyBXYXkgQ3Jhd2xleSAgUkgxMCA5VVkgR0IfCwUGX2JsYW5rFgJmDxUBCkRpcmVjdGlvbnNkAgcPFgIfCWgWAmYPFQENUGFydG5lciBMZXZlbGQCCQ9kFgRmDxUBDFBhcnRuZXIgVHlwZWQCAQ8PFgIfBgULRGlzdHJpYnV0b3JkZAILD2QWBGYPFQEUU2VydmljZSBQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFBENQU1BkZAIPD2QWAmYPFQIhaHR0cDovL1VLLkNPTlZFUkdFTkNFLldFU1RDT04uQ09NGlVLLkNPTlZFUkdFTkNFLldFU1RDT04uQ09NZAK7AQ9kFhJmDxUBCDEyMzgyNjk2ZAICDxUBNldlc3Rjb24gR3JvdXAgRXVyb3BlYW4gT3BlcmF0aW9ucyBMdGQgKFVuaXRlZCBLaW5nZG9tKWQCAw8WAh8GBQxTYWxlcyBPZmZpY2VkAgQPFQcXUmljaG1vbmQgSG91c2UsIE9sZGJ1cnkACUJyYWNrbmVsbAAIUkcxMiA4VFENZGlzcGxheTpibG9jaw8rNDQgMTM0NCAzNTc4MzVkAgUPZBYGAgEPFgIfCAUaTG9nQ2xpa2VkKCIxMjM4MjY5NiIsICIyIikWAmYPFQEHQ29udGFjdGQCBA8WBh8IBRpMb2dDbGlrZWQoIjEyMzgyNjk2IiwgIjEiKR8KBRwvL1VLLkNPTlZFUkdFTkNFLldFU1RDT04uQ09NHwsFBl9ibGFuaxYCZg8VAQdXZWJzaXRlZAIHDxYGHwgFGkxvZ0NsaWtlZCgiMTIzODI2OTYiLCAiNSIpHwoFVmh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9zYWRkcj0mZGFkZHI9UmljaG1vbmQgSG91c2UgT2xkYnVyeSBCcmFja25lbGwgIFJHMTIgOFRRIEdCHwsFBl9ibGFuaxYCZg8VAQpEaXJlY3Rpb25zZAIHDxYCHwloFgJmDxUBDVBhcnRuZXIgTGV2ZWxkAgkPZBYEZg8VAQxQYXJ0bmVyIFR5cGVkAgEPDxYCHwYFC0Rpc3RyaWJ1dG9yZGQCCw9kFgRmDxUBFFNlcnZpY2UgUGFydG5lciBUeXBlZAIBDw8WAh8GBQRDUFNQZGQCDw9kFgJmDxUCIWh0dHA6Ly9VSy5DT05WRVJHRU5DRS5XRVNUQ09OLkNPTRpVSy5DT05WRVJHRU5DRS5XRVNUQ09OLkNPTWQYAgUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgEFDGNoa2xpc3RDYXQkMAULcmVzdWx0c0xpc3QPFCsADmRkZGRkZGQ8KwC8AQACvAFkZGRmAv%2F%2F%2F%2F8PZP9i0wJUTc6GPntL0T9gey%2BbMlayRuybwBa2APrffpdb&__VIEWSTATEGENERATOR=CA0B0334&__EVENTVALIDATION=%2FwEdAJ4CjIonAqvsaeCNubEDNYX77ltGaBx700b%2FaHR%2FsRm7by7vOalnOJe8rii09tsir0ksH2BAdJVilga%2B13sKHrJWMZgORPf%2F6kfXFdkoBGpNgJxdfaQM%2BqZNgO%2FwcSJESJKDcJEHvaFk%2BTM69BQR9FykITp95E0jURS25iSvJKE%2F6ONedKsZVmIehZJXpL07pcnM3KMhZWBJhMh%2B0mwqxmBRdKaTz75PUAnIVu3Cqc5HOF%2F7NJzlybn9Jx0RpnadzUWLcekFhSeoxMSEuTvxpcShlTP1CHpQ4odd%2ByxdTf1RTgKP%2F77k5ClQxbZGpdjqTPN2Ac6ZTP998eO%2Bf9MJRsRq5qdLFw8tv1ewo2c7mQISk6GZQjqpYNyXXCoA%2FKYO2KPEWKn3PXxeFYysgvzzg64KvyJVlrsnGiuABbWTMnSP1VGc4qLMnvITG283pG923bFTqUHXPYvnjKxzx%2B1iBYo6ihGtfeAGTwNLUNj%2BS9f1PqA6na%2BRpB7Ne0A9oJtD4HL54PgAY8nkDtlgextBS5qU8fXV9JT6PrfIZFvl%2BdB6BpNopmXH9cw1Y%2BB0LQB5Q%2FMO0s7G4feUwugT0a0EN95QZKnDUrkev2Dz%2BvS2MFu0ZuAZlhFPGAT%2Bf3bR6zOpVXPuEewL%2FnnZVr7NRjaMk%2B7V%2BFdGzev60JwFvmNo%2Byz%2BRftUQF0I4phm4KjLYZqoZRcBZePyTmgGuX5la7ni7IZdb6j9QHVwv0Cs9%2FVEyGEzTdEwdIdAW07JmK3mOWxEaI4KcT%2B3hC1Gw9VDQAFQY9UCLrKuefLn8mfstMtVuOF7JVQQCGiy%2F%2F4zz0NWrCAIib4NLddbFJEzPhCyKwiqTRxHnKC1U3MI3K2gl77sHfQv5AjsRDkXZnXqfTX6erNgl9wCNOkjmdoUcjmwL5e2CPnF8DDrgHkIN0Qb3NYkVj6rGf5%2FEwStcppOA3%2Bpe87vBpBTa%2FVHzE8qeodHovHYGdPVpoYFRYyEMWoojIOyKF1WEQ7JkJuOPyWJsDvSHh%2FCRE%2F3HsE8in4U33Rs9Y16g6Svn8KL56qx4dzI9TNxMjtFuVMVnosBMRKPscDtbWbhwlAMIDrq6SeH7oHDiqFxn68TyL2wLuI65xrXbDuR3L%2FblGxxwLTa0SDNhAbmN7geXjAfaPbU7U27akNEEAHN8Z9zAStET5LhFYb4mUo25VocE9rV1Yf3b%2B1rsTSqyHAllWUQwAbc0pKHACE4Sk7mL%2BfiLtC7tBWPkXZoFziOY97rHVjH28fYpQn47sz13srXA6Uhr1QNAWruhysnTFNl49XzWxPOm0ix06ASV%2FFCySuutknVGeNlYMt3h5NqGAILYl5A6b50vwMsN7WPjVf656O%2BWGy8B%2Bqu5ehiV03axiyyab2RqkKU0wA7fDYgct0%2B7aFPSqlpkQBJv84NVSu1DXewfCa7Lx3BzLj6iCUgV%2BvTavpaq9Awy2S3xwf54KjCmtzpClXvZH8jezMFDekvZyfJPcZhA4Qh9LtlIOylsY9jl414BsSkUARXNpGxsv8%2FNaRZsU%2BI8o4L0slVBy4B1PODmeqy22o4Gnp%2FyhFyyoq8KYyfJZ03AlGfavIMOeAWv8wgCLgaSvO4bU08tZwv%2F3zpuCqlZwINkRe3siqqDMO3aaUztkgIupFDsalXDqRskpy1sCmcnArWxnJLWnKzZG1tVIHaO7qbi78SFvDXb46vWAEkm%2FsyAfSoI3r7SyRV8DAQzSzQLJRSjkcYsp4TaCeCuXL1bhhq8EgjVP%2ByBx%2Brw0XYlfqpr5wRzFsBZ%2F5hNgtOYYZKMTEY1Tu239JgbKJMEUY%2FspQU3%2BcVsvQWODhs%2Fi9RB2ylJK7Fec%2FDWWJK1nRBVfVlLZwg6Pd39bgsmcdi32TV4UWQHbvZCRwtbJ9JkmCnJvKyH99uLJU728hHOfarLXnj%2BlUKJ6zxsAmajSvuiPh6960xawpfE6XwIw%2FiVvhuWxpENU1RW9hwB0SaziGptCTI4wfswW1VcIKzIkJiG3vrbFIlXKWlH0mQRyHKTol4KbPIlOuG9RYcGy2Z8QW9UhS4hbZRvM8dN0gyL6JqrndUEGw%2Fi%2BlipaZeDYZyjz9iMX2NWN8GeMpXO7JFBM0BQpPqMzJK7jPGXHupuNDzX%2FV3zaQM9l2EUqn%2BcilpqxD%2F3cX5hS3DBAMFa0AToKthI%2B2QAw%2BAG2vrc2OiNxVCqUZpTvG9BWhH5FAly1Orp67%2BlRdeIWKFqZXdrs3FIi%2FtqQ1ly2A8vfXJByhs2vo4FEevQQnq18PylTU1Q7tUroGEMxATdtyA%2FBBYMPBppKBKQClgZ9InbdYdRU1TNpAL6ClW4IjiZ97HeJgbRW1XTKt6alanGDNgrzlMSHm24q%2Fp8gIIKJkZjix2P5%2FawhGKHDTXr1JivrJIntP5AhcSpDY0jorrGwBEwbjfiixVmKLXy0LrU%2BjdLt8LQrq35%2BX%2BbPuBWiy4kiyYMbZ3v%2B7vEOcaPW1dRkqbUkuTVrNZDeDLsvFDX0BxvvVkR8c901E44VTM2f%2ByCqvmORt3%2BQw%2B3RD0tRyIxgJZlGHS8swhSeolHSOm8puXCb97PQVPKUTmd3HPfPAY81kVHxtpF2eDrjNta00VHFIIbh7SMgnCvAsl5ckSSN1caLxWQi4gVudvWm8%2BPWQ2aBUl6nwDbSp369aARkdhUWSsUvKbSzgK9aolXLLEj4EDDF5XUJx34AQkbw5o79ybwkryEWZwF59ZbfKGLNlEK9VOwL15nWzoqDVHurseNpE7wRN771HJFUlqlTkYJRzL9cw5Xr79xdLiIFfyS59FQBdCyDWvZo4vmvwL05y7TDfk2u3wj%2Fzpp3pXAtzXS1Vd2PrvCB1tl5I8U1EiAnsuraV3Pik%2Bc%2FT%2FKA62oYTOjsnBTyR17feBBitw5h03MSBKXfdtyStzND%2FinOt%2BH8l6bGqvfn8fIuWBIFCwhTqbPqs0dX6oCayIga5EozWTASOwFThsDfImI9eB7WYm%2FBOjFyI%2F5Hjlej%2BgMl4etkNTSNI4JIhvKckfuSI92CNOuD0rnv7b3Tf8%2FoI4ms%2FQcoK8qjfDkvehW6b01sOqnPushYmNIk1JhtoyDl2slGGNUO4hRgKGd4GW8BVRVzZnKg3pMEJ3h7hKkJN%2F%2BQfV5%2BdHinDQ3wM01g9S%2BeYbBQ5e8z%2FqkNIoQsUxmI4Q4RkprCxEhJbaTqHuM2i5ECLhvJRsu8wF1XbPcF1Swm4HNENd%2F0L91zCG7QIe5CFtvYDZi2%2FcYQexJ8RcJCR2K02GPWoe9bW6T8jYqy6HR4t82kkb3HsFCoW2qLnide%2FBnJhnBRlpZR7M3h8GQ3wOqQ%2BKJFrJ0jsZDNNP5eMNbsjzFxzZU2jIYHbsS3iRqUlj85leBlmVQ0DOdKTjsV7Bwsx22FNT%2BoK9n4zkCvcKhEwu2iVWZJz8DiCpkWSUE9OruOzDfuTr2FPUud1oKZQ3g1OXGK1QIvbXIMKpHw0%2FNCr2K6pmIQMWUUq4SpP%2FONwvo4pcDXt04m6qLrWcWzBtgG4lmicskCiYXkNGjACDdn0fwfBZF27r5nwlBVy7x2p7q%2BhB0Z%2Bnfu9dsTWkfxZmUTr5M5xl8Vn652nimMUNr35U8hWrz48XUA9644Detcp5SbRSXrIepjV55zczxOIpCH9aTE0Hf9yLSSHsUSmeTMNr9NPr7BGOURyPfnOAW3BDSS%2FqY4lwIwv7SXmeBGv0x2SVQJ7peTL62v1cUAjNSZsiRYOCg0fqTWIW8X%2BdgJDcN8z1VBUizSX9odKMOIQhBy7w63%2FSfjmSdVUBUurp5g2GFYqAyZ8JvDeN7OzKIsw2RpcTZVtPhOFvxb1R9EdjxuzGOIOJJ4ybOARwedZPO%2Befsh0KxHUPS%2FPuFvGdznzoh8VFnsFn1QCU%2FyghfOnfEWoGuw23aK8bnzzbHX1UsG2ZntANgzWsFzajUfds%2BhgLQ9NlPQf%2BtruQe%2BSDhbCqXikLqnm582Nn2HYJ%2FfjCX28L43N2GuXb%2FvyPcHh2RiMbVTSLTuaKmS4LN%2FminbSSmuRYWtHQHynwhnmDjJU1Vp2ZC5EGYVSvIZGfj3dHga2DURJeW%2FHU79jmlzFpLTHPcihrl316u95TfOuPe%2FXpsoP4pGGsCcpw%2Figiz7lzsP0PBCzM1OqZJE5zG23kodnrrRtjHneXX%2FEoObYX7F8OJkuvok9r9vwDey80uRAdXS1Pd3LKCeLQwStyN%2B99X7TTT44OgxIumHJpPv1wTzVBZBApVHGdPrshzUC3F1lIim1QdYVe76B9tm8HBY1bd%2BdH8F6uEz17fvqXG5qDWuYaBWqdyMrg0RlhvBacN3ZeoZU%2BE9ETRbEHVvVnTfowyDlqkXokVCnp8zJrROEjGkzPXwO4SnEFkcm231XuDxznlsHEmi%2Fq8%2FJonEPRzVFGKk4T45WN2XlkK3dUXWb%2FF9yOB%2F40qXQq1g1YggVhSkc0phvVBGBAW14uD3fj6bak8EtIwULwhSKH48GXpA6MHxl9v8cfFn6H7%2FiW6wiPOr0IOf3IoIDJQbF5i%2BBEtpaxvjbOrJMfcoNwWHIK0daBot6Di%2BUQo%2FlIpkW9xTHcWFc5UWRxQt4HzB8%2BUY1WA%2F0O7E%2FfI8T5bH8UfFO8d99Gf3dpI4Xoyr9QcQ4rSFiQ2sYKqnFEbhjWgkD2yNO1p1Q2srs5QLDppvLAGqn4ucDnfKMsplI%2BE2teKSNw1du6zg9jQHok5WFnIbYfBsHNp8aLbsovYAg9OUgpW7cW74u7hk74riddRZKCvhqm4%2BUYygdm9LwuYPAK8gpws1Rm%2FGnGH9PJ0%2FXCbu4qqXS5W8QgVxDxZJi4q08AIil2sX0689sz7YSX3SixDNQgiZGlYVAvobE9RJSfbN1KGPcsdAfxjT%2BJX8MiH%2B%2Ben0cELIcoz2FRif6uuY9SUnmMBX64a74CNLnqyMcSpso0O98pVCnfK6ul9%2FOUeb6OnaUoKAuQuwgisu4GDjH1tqodO7DTU%2FBuwT%2BMoETbKPAmecqkAQYLkcXgOG92kKVtOc7pnTSunEkctA29Hdb38ZRiaK43kngJOXfnKr8VguxGqs1ssj%2FDUn5LSJ6h%2FNi9L9LzaVOmu2o%2BNoNciD0xmR2bXDyGZEIHHvrBtlCt6pZeeuWMRf%2FBUAfF6WywTIV3Yg3MjbcF4JblQH%2FLD7hN4Vp7T05n3IOfoAPomy1qHabsmy0NjKsg6gapikorSJbNPAeQguPT9E6gpf0Wbgnxt1Mp1z4ADFuOrQ9FjFY%2F019WvhHr3CKSSc70cRYYMmH%2BPPU85O%2BiXhJrQgf8YCjTaKk3C95E4bxNb%2FsPBE%2F2WMXXdW3oh6QrMBTt0r2Ife9BcmjVIuZoKbn9hDUf1UsdCn1Yk%2BPPOeeriR7HS3KlM26YExHGBzLSruzheoNustlaB%2FDf8tW7kuOccPQtrO1cTgw6p5pGsdsV5QzTv1U%2FK%2BcmqtEKeLR3l4f2AId3zLUgmodKoYnkkOPRkbxyNAOLAiRDxO7LDrgPLifPUiHUD%2FGzc0dy%2FldRMUCVfcnEji69GF5CLD9PbW66%2F7%2Ft%2Bwdq3JZ4TA%2BmUzV8vSYyZChLjhZJFOG%2BAe6QfAyxXG6fVXDu9ecFiMPDYoVQlnC%2B8HmdFyQRFvNM5maOt0VWZtaLa3u7stZqqvVBffSL2dwnzW3HMBaPKFascRLe40%2Fwn0aDDa%2Futj%2Fvkdix8eNH9BVSUncc30QEkPdBHHPIaoKbO5SanXo9ISCbYMmORkztf2t%2Bp8nvJamZcXHNWPQhzH3WntEjg634kDWeEaDUVE5IsD8U7hiqHUGtxbmpW2bihpW78XsVWJB2BGHJMzffnNsReeH0gl9ycrXUxN5vUsiNi64PVNOB1NoRmP6FLWqqKf8Rq20XJ%2FeH9dO5QS68M5KEx0GxvJoDnwKgmgUH5Yyl%2FXZ8gAS6K02EQoRVyu2Jw90t%2FylUmo1Rk1LKpDEjImHj7cXLxY5pnndsJKi6zy6c9Vr56jVJu6y1qVLYui%2BqKbv6NK%2FTJDmMJeVy7a%2BFOtwNKLsYfqkFKToRbviH6QbHUiO5%2F8OSogHx5b%2F7KobjiNyARIyNd6TE4eiT7cvu%2BFH8Wbb9BEkIH%2BjPSyXX7IXFO8aB9iFmUYJjWmrMcqKj8%2BmA2S2hpC0ORbl2bDq3XnJr&__ASYNCPOST=true&lbSearch=Search'
                yield scrapy.Request(method='POST', url=self.partner_program_link, body=data, callback=self.parse_country, headers=self.headers,
                                     meta={'country': country, 'specialization': specialization})

    def parse_country(self, response):
        country = response.meta['country']
        specialization = response.meta['specialization']

        if response.status != 200:
            self.logger.info(f'ERROR REQUEST STATUS: {response.status}, RESPONSE: {response.text}')
            return

        soup = BS(response.text, "html.parser")
        partners = soup.find_all('div', {'class': 'resultsDetails'})
        for partner in partners:

            # location = partner.find('a', id=re.compile('^resultsList_aDirections_'))['onclick']
            # if location in self.done_locations:
            #     continue
            # else:
            #     self.done_locations.append(location)

            # Initialize item
            item = dict()
            for k in self.item_fields:
                item[k] = ''

            item['partner_program_link'] = self.partner_program_link
            item['partner_directory'] = self.partner_directory
            item['partner_program_name'] = self.partner_program_name

            item['specializations'] = specialization
            item['partner_company_name'] = partner.find('h3').text

            address = partner.find('div', {'class': 'resultsAddress'})
            loc_type = address.find('p', id=False)
            if loc_type and loc_type.text == 'Headquarters':
                item['headquarters_address'] = ' '.join([t.strip() for t in partner.find('address').findAll(text=True, recursive=False)]).strip()
                item['headquarters_country'] = country
            else:
                item['locations_address'] = ' '.join([t.strip() for t in partner.find('address').findAll(text=True, recursive=False)]).strip()
                item['locations_country'] = country

            span = address.find('span').text if address.find('span') else ''
            if span != '':
                item['general_phone_number'] = span

            links = partner.find_all('a')
            for link in links:
                if link.text == 'Website':
                    item['company_domain_name'] = link['href']
                    try:
                        url_obj = urllib.parse.urlparse(item['company_domain_name'])
                        item['company_domain_name'] = url_obj.netloc if url_obj.netloc != '' else url_obj.path
                        x = re.split(r'www\.', item['company_domain_name'], flags=re.IGNORECASE)
                        if x:
                            item['company_domain_name'] = x[-1]
                        if '/' in item['company_domain_name']:
                            item['company_domain_name'] = item['company_domain_name'][
                                                          :item['company_domain_name'].find('/')]
                    except Exception as e:
                        print('DOMAIN ERROR: ', e)
                    break

            if partner.find('div', {'class': 'resultsCategories'}):
                if partner.find('div', {'class': 'resultsCategories'}).find('p', id=re.compile('^resultsList_pLevels_')):
                    item['partner_tier'] = partner.find('div', {'class': 'resultsCategories'}).find('p', id=re.compile('^resultsList_pLevels_')).find('span').text if partner.find('div', {'class': 'resultsCategories'}).find('p', id=re.compile('^resultsList_pLevels_')).find('span') else ''

                if partner.find('div', {'class': 'resultsCategories'}).find('p', id=re.compile('^resultsList_pTypes_')):
                    item['partner_type'] = partner.find('div', {'class': 'resultsCategories'}).find('p', id=re.compile('^resultsList_pTypes_')).find('span').text if partner.find('div', {'class': 'resultsCategories'}).find('p', id=re.compile('^resultsList_pTypes_')).find('span') else ''

                if partner.find('div', {'class': 'resultsCategories'}).find('p', id=re.compile('^resultsList_pSpecializations_')):
                    item['services'] = partner.find('div', {'class': 'resultsCategories'}).find('p', id=re.compile('^resultsList_pSpecializations_')).find('span').text if partner.find('div', {'class': 'resultsCategories'}).find('p', id=re.compile('^resultsList_pSpecializations_')).find('span') else ''

            yield item
